## do not insert blank lines in between macros. as this document is loaded before the XML tag of the main document,
## this will result in the empty lines appearing at the head of the document, which is not allowed in XML.
##
##
##
#macro (vulnerabilityOverview $id $title $vulnerabilities $includeContextSevertiyColumns)
<table id="$id">
    <title>$title</title>
    #if ($includeContextSevertiyColumns)
    <tgroup cols="7">
        <colspec colname="COLSPEC0" colnum="1" colwidth="17*" />## name
        <colspec colname="COLSPEC1" colnum="2" colwidth="14*" />## score
        <colspec colname="COLSPEC2" colnum="3" colwidth="14*" />## score (ctx)
        <colspec colname="COLSPEC3" colnum="4" colwidth="12*" />## severity
        <colspec colname="COLSPEC4" colnum="5" colwidth="12*" />## severity (ctx)
        <colspec colname="COLSPEC5" colnum="6" colwidth="14*" />## priority
        <colspec colname="COLSPEC6" colnum="7" colwidth="17*" />## status
    #else
    <tgroup cols="5">
        <colspec colname="COLSPEC0" colnum="1" colwidth="17*" />## name
        <colspec colname="COLSPEC1" colnum="2" colwidth="40*" />## score
        <colspec colname="COLSPEC3" colnum="3" colwidth="12*" />## severity
        <colspec colname="COLSPEC5" colnum="4" colwidth="14*" />## priority
        <colspec colname="COLSPEC6" colnum="5" colwidth="17*" />## status
    #end
    <thead>
    <row>
        <entry colname="COLSPEC0" valign="top">Name</entry>
        <entry colname="COLSPEC1" valign="top">$utils.getText("general.short.score")</entry>
        #if ($includeContextSevertiyColumns)
            <entry colname="COLSPEC2" valign="top">$utils.getText("general.short.score")<sub>ctx</sub></entry>
        #end
        <entry colname="COLSPEC3" valign="top">$utils.getText("inventory-report-vulnerability.short.severity")</entry>
        #if ($includeContextSevertiyColumns)
            <entry colname="COLSPEC4" valign="top">inventory-report-vulnerability.short.severity<sub>ctx</sub></entry>
        #end
        <entry colname="COLSPEC5" valign="top">$utils.getText("inventory-report-vulnerability.short.priority")</entry>
        <entry colname="COLSPEC6" valign="top">Status</entry>
    </row>
    </thead>

    <tbody>
        #foreach($vulnerability in $vulnerabilities)
        <row>
            ##
            #set ($vulnerabilityName = $vulnerability.getId())
            #set ($vulnerabilityNameTextEscaped = $report.xmlEscapeString($vulnerabilityName))
            #set ($vulnerabilityNameIdEscaped = $report.xmlEscapeStringAttribute($vulnerabilityName))
            ##
            #set ($matchingReasonsLabels = $vulnerabilityAdapter.vulnerabilityMatchingSourceLabelsForOverview($vulnerability)) ## $matchingReasonsLabels : List<String>
            ## #set ($matchingReasonsLabels = $vulnerabilityAdapter.splitVulnerabilityMatchingSourcesIntoMultipleLines($matchingReasonsLabels, 19, 27))
            ##
            #set ($cvssVectors = $vulnerability.getCvssSelectionResult())
            #set ($cvssHasInitialCvss = $cvssVectors.hasInitialCvss())
            #set ($cvssHasContextCvss = $cvssVectors.hasContextCvss() && $includeContextSevertiyColumns)
            #set ($cvssInitialCvss = $cvssVectors.getSelectedInitialCvss())
            #set ($cvssContextCvss = $cvssVectors.getSelectedContextCvss())
            ##
            #set ($baseVulnerabilityStatus = $vulnerabilityAdapter.getBaseVulnerabilityStatus($vulnerability))
            ##
            #set ($allAdvisories = $vulnerabilityAdapter.getEffectiveSecurityAdvisoriesForVulnerability($vulnerability))
            #set ($grouopedAdvisories = $vulnerabilityAdapter.groupSecurityAdvisoriesBySourceAndType($allAdvisories))
            ##
            #set ($priorityData = $vulnerability.calculatePriorityScore($vulnerabilityAdapter.getSecurityPolicy()))
            #if ($priorityData.isElevated())
                #set ($labelName = "priority-severity-" + $priorityData.getResultingSeverityRange().getName())
            #else
                #set ($labelName = "priority-severity-standard")
            #end
            ##
            #set ($moreRows = 1) ## vulnerable configurations row is always added
            #if (!$allAdvisories.isEmpty()) #set ($moreRows = $moreRows + 1) #end
            ##
            <entry morerows="$moreRows" colname="COLSPEC0">
                <lines>#if ($vulnerabilityAdapter.shouldVulnerabilityBeDisplayedInDetails($vulnerability))<xref href="tpc_inventory-vulnerability-details.dita#$vulnerabilityNameIdEscaped" type="topic"><codeph>$vulnerabilityNameTextEscaped</codeph></xref>#else<xref href="$vulnerability.getUrl()" type="html" scope="external"><codeph>$vulnerabilityNameTextEscaped</codeph></xref>#end</lines>
            </entry>
            ## score
            #if ($cvssHasInitialCvss) <entry>$cvssInitialCvss.getOverallScore()</entry> #else <entry>&nbsp;</entry> #end
            #if ($cvssHasContextCvss) <entry>$cvssContextCvss.getOverallScore()</entry> #elseif ($includeContextSevertiyColumns) <entry>&nbsp;</entry> #end
            ## severity
            #if ($cvssHasInitialCvss) <entry>#cvssVectorSeverityLabelRef($cvssInitialCvss)</entry> #else <entry>&nbsp;</entry> #end
            #if ($cvssHasContextCvss) <entry>#cvssVectorSeverityLabelRef($cvssContextCvss)</entry> #elseif ($includeContextSevertiyColumns) <entry>&nbsp;</entry> #end
            ## priority
            <entry colname="COLSPEC5">#labelRef($labelName)</entry>
            ## status
            <entry colname="COLSPEC6">
                #labelRef($baseVulnerabilityStatus)
            </entry>
            ##
        </row>
        #if (!$allAdvisories.isEmpty())
        <row>
                <entry namest="COLSPEC1" nameend="COLSPEC6">
                    ## the labels can be CPEs, MS Product IDs, GHSA identifiers, etc.
                    ## the vulnerability matched via these identifiers
                    ## the following line must be exactly like this, otherwise the line breaks will be messed up
#foreach ($advisoryCategory in $grouopedAdvisories)
<p>#foreach ($advisory in $advisoryCategory)#if ($velocityCount > 1), #end#set($advisoryUrl = $report.xmlEscapePreformattedContentString($advisory.getUrl()))#if ($vulnerabilityAdapter.notEmpty($advisoryUrl))<xref href="$report.xmlEscapePreformattedContentString($advisory.getUrl())" type="html" scope="external">$report.xmlEscapeString($advisory.getId())</xref>#else<xref type="html" scope="external">$report.xmlEscapeString($advisory.getId())</xref>#end#end</p>
#end
                </entry>
        </row>
        #end
        <row>
            #if ($matchingReasonsLabels.isEmpty())
                <entry namest="COLSPEC1" nameend="COLSPEC6">
                    $utils.getText("inventory-report-vulnerability.no-vulnerable-configurations")
                </entry>
            #else
                <entry namest="COLSPEC1" nameend="COLSPEC6">
                    <lines>#foreach($label in $matchingReasonsLabels)#if ($velocityCount > 1), #end$report.xmlEscapeString($label)#end</lines>
                </entry>
            #end
        </row>
        #end
    </tbody>
</tgroup>
</table>
#end
##
##
##
#macro (advisoryOverview $id $title $advisories)
<table id="$id">
##    <title>$title</title>
    <tgroup cols="4">
        <colspec colname="COLSPEC0" colnum="1" colwidth="20*" />
        <colspec colname="COLSPEC1" colnum="2" colwidth="56*" />
        <colspec colname="COLSPEC2" colnum="3" colwidth="12*" />
        <colspec colname="COLSPEC3" colnum="4" colwidth="12*" />
        <thead>
        <row>
            <entry colname="COLSPEC0" valign="top">Id</entry>
            <entry colname="COLSPEC1" valign="top">Summary</entry>
            <entry colname="COLSPEC2" valign="top">Create Date</entry>
            <entry colname="COLSPEC3" valign="top">Update Date</entry>
        </row>
        </thead>
        <tbody>
            #foreach ($advisory in $advisories)
            #set($advisoryUrl = $report.xmlEscapePreformattedContentString($advisory.getUrl()))
            <row>
                #if ($vulnerabilityAdapter.notEmpty($advisoryUrl))
                <entry><xref href="$advisoryUrl" type="html" scope="external">$report.xmlEscapeString($advisory.getId())</xref></entry>
                #else
                <entry><xref type="html" scope="external">$report.xmlEscapeString($advisory.getId())</xref></entry>
                #end
                <entry>$report.xmlEscapePreformattedContentString($advisory.getNonEmptyDescription())</entry>
                <entry>$report.xmlEscapeString($advisory.getCreateDateFormattedDateLevel())</entry>
                <entry>$report.xmlEscapeString($advisory.getCreateDateFormattedDateLevel())</entry>
            </row>
            #end
        </tbody>
    </tgroup>
</table>
#end
##
## generates a table from the references listed in the vulnerability instance.
## a reference consists of a link that leads to a resource and a target that describes who the target host is.
##
## Target       Hyperlink
## NVD          https://nvd.nist.gov/vuln/detail/CVE-2021-44228
## MITRE        https://www.cve.org/CVERecord?id=CVE-2021-44228
## CVE Details  https://www.cvedetails.com/cve/CVE-2021-44228
##
#macro (referenceTable $id $title $vulnerability)
<table id="$id">
##    <title>$title</title>
    <tgroup cols="2">
        <colspec colname="COLSPEC0" colnum="1" colwidth="30*" />
        <colspec colname="COLSPEC1" colnum="2" colwidth="80*" />
        <thead>
        <row>
            <entry colname="COLSPEC0" valign="top">$utils.getText("inventory-report-vulnerability.short.target")</entry>
            <entry colname="COLSPEC1" valign="top">Hyperlink</entry>
        </row>
        </thead>
        <tbody>
            #set ($hasSource = !$vulnerability.getSourceIdentifier().getWellFormedName().equals("UNKNOWN"))
            #set ($hasNvd = $vulnerability.getWellFormedDataSources().contains("NVD"))
            #set ($hasMsrc = $vulnerability.getWellFormedDataSources().contains("MSRC"))
            #set ($hasReferenceUrl = $utils.notEmpty($vulnerability.getUrl()))
            ##
            #if ($hasNvd || $hasMsrc)
                #if ($hasNvd)
                <row>
                    <entry>NVD</entry>
                    <entry><xref href="$report.xmlEscapePreformattedContentString($vulnerability.getUrl())" type="html" scope="external" /></entry>
                </row>
                <row>
                    <entry>MITRE</entry>
                    <entry><xref href="https://www.cve.org/CVERecord?id=$vulnerabilityName" type="html" scope="external" /></entry>
                </row>
                <row>
                    <entry>CVE Details</entry>
                    <entry><xref href="https://www.cvedetails.com/cve/$vulnerabilityName" type="html" scope="external" /></entry>
                </row>
                    #if ($hasMsrc)
                    <row>
                        <entry>MSRC</entry>
                        <entry><xref href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/$vulnerabilityName" type="html" scope="external" /></entry>
                    </row>
                    #end
                #elseif ($hasMsrc)
                <row>
                    <entry>MSRC</entry>
                    <entry><xref href="$report.xmlEscapePreformattedContentString($vulnerability.getUrl())" type="html" scope="external" /></entry>
                </row>
                #end
            #elseif ($hasSource && $hasReferenceUrl)
            <row>
                <entry>$vulnerability.getSourceIdentifier().getWellFormedName()</entry>
                <entry><xref href="$report.xmlEscapePreformattedContentString($vulnerability.getUrl())" type="html" scope="external" /></entry>
            </row>
            #end
        </tbody>
    </tgroup>
</table>
#end
##
## generates single sections with rational, risk and measures information for the latest vulnerability status entry, if
## present.
##
#macro (vulnerabilityStatusDetails $vulnerability)
    #set ($latestStatusEntry = $vulnerability.getOrCreateNewVulnerabilityStatus().getLatestActiveStatusHistoryEntry())
    #if ($latestStatusEntry)
        #if ($utils.notEmpty($latestStatusEntry.getRationale()))
        <section>
            <title>$utils.getText("inventory-report-vulnerability.short.rational")</title>
            <body>
                $report.xmlEscapePreformattedContentString($latestStatusEntry.getRationale())
            </body>
        </section>
        #end

        #if ($utils.notEmpty($latestStatusEntry.getRisk()))
        <section>
            <title>$utils.getText("inventory-report-vulnerability.short.risk")</title>
            <body>
                $report.xmlEscapePreformattedContentString($latestStatusEntry.getRisk())
            </body>
        </section>
        #end

        #if ($utils.notEmpty($latestStatusEntry.getMeasures()))
        <section>
            <title>$utils.getText("inventory-report-vulnerability.short.measures")</title>
            <body>
                $report.xmlEscapePreformattedContentString($latestStatusEntry.getMeasures())
            </body>
        </section>
        #end
    #end
#end
##
## generates a codeph element that contains a reference to a cvss web calculator
##
#macro (cvssVectorLink $cvssVector)
    #set ($vector = $report.xmlEscapeContentString($cvssVector.toString()))
    #set ($link = $report.xmlEscapeContentString($cvssVector.getWebEditorLink()))
    #if ($utils.notEmpty($vector))
    <codeph><xref href="$link" type="html" scope="external">$vector</xref></codeph>
    #end
#end
##
## This method should only be called if the vulnerability has keywords, otherwise an empty <table> is generated for
## the keyword set list.
## Alongside the keywords, the total score on the vulnerability is also displayed at the top in a <p> element.
## FIXME: Revise with new vulnerability implementation, is currently disabled.
##
#macro (keywordSetList $id $title $vulnerability)
    #set ($keywordSetJson        = $vulnerability.getAdditionalAttribute("Matched Keyword Sets"))
    #set ($keywordSetsTotalScore = $vulnerability.getAdditionalAttribute("Matched Keyword Total Score"))
    ##
    #set ($parsedKeywords        = $vulnerabilityAdapter.parseKeywordsFromInputJsonArrayString($keywordSetJson))
    ##
    #set ($hasKeywords = $parsedKeywords.size() > 0)
    #set ($hasTotalScore = $utils.notEmpty($keywordSetsTotalScore))
    ##
    #if ($hasKeywords)
        #if ($hasTotalScore)
        <p>$utils.getText("inventory-report-vulnerability.total-keyword-score") $keywordSetsTotalScore</p>
        #end
    <table id="$id">
##        <title>$title</title>
        <tgroup cols="4">
            <colspec colname="COLSPEC0" colnum="1" colwidth="15*" />
            <colspec colname="COLSPEC1" colnum="2" colwidth="15*" />
            <colspec colname="COLSPEC2" colnum="3" colwidth="15*" />
            <colspec colname="COLSPEC3" colnum="4" colwidth="55**" />
            <thead>
            <row>
                <entry colname="COLSPEC0" valign="top">Name</entry>
                <entry colname="COLSPEC1" valign="top">$utils.getText("general.short.category")</entry>
                <entry colname="COLSPEC2" valign="top">$utils.getText("general.short.score")</entry>
                <entry colname="COLSPEC3" valign="top">$utils.getText("general.short.notes")</entry>
            </row>
            </thead>
            <tbody>
                #foreach ($keywordSet in $parsedKeywords)
                    #set ($hasName     = $utils.notEmpty($keywordSet.getName()))
                    #set ($hasCategory = $utils.notEmpty($keywordSet.getCategory()))
                    #set ($hasScore    = $vulnerabilityAdapter.notNull($keywordSet.getScore()))
                    #set ($hasNotes    = $utils.notEmpty($keywordSet.getNotes()))

                    #if ($hasName || $hasCategory || $hasScore || $hasNotes)
                    <row>
                        #if ($hasName)
                            <entry>$keywordSet.getName()</entry>
                        #else
                            <entry>&nbsp;</entry>
                        #end
                        #if ($hasCategory)
                            <entry>$keywordSet.getCategory()</entry>
                        #else
                            <entry>&nbsp;</entry>
                        #end
                        #if ($hasScore)
                            <entry>$keywordSet.getScore()</entry>
                        #else
                            <entry>&nbsp;</entry>
                        #end
                        #if ($hasNotes)
                            <entry>$keywordSet.getNotes()</entry>
                        #else
                            <entry>&nbsp;</entry>
                        #end
                    </row>
                    #end
                #end
            </tbody>
        </tgroup>
    </table>
    #end
#end
##
## Generates a table that contains the base CVSS Vector information without the details of base, impact, exploitability
##
## Scheme   Source                  Overall  CVSS Vector                                   Severity
## CVSS:2.0  NVD-CNA-NVD            9.3      AV:N/AC:M/Au:N/C:C/I:C/A:C                    Critical
## CVSS:3.1  Microsoft Corporation  10.0     CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H  Critical
##
## If a vector is not present, it will skip the row.
##
#macro (cvssScoreOverviewTable $id $title $vulnerability $useContextSeverityScores)
    ##
    #set ($cvssVectors = $vulnerability.getCvssSelectionResult())
    ##
    #if ($useContextSeverityScores)
        #set ($cvssVectorV2 = $cvssVectors.getContextCvss2())
        #set ($cvssVectorV3 = $cvssVectors.getContextCvss3())
        #set ($cvssVectorV4 = $cvssVectors.getContextCvss4())
    #else
        #set ($cvssVectorV2 = $cvssVectors.getInitialCvss2())
        #set ($cvssVectorV3 = $cvssVectors.getInitialCvss3())
        #set ($cvssVectorV4 = $cvssVectors.getInitialCvss4())
    #end
    ##
    #set ($hasCvssV2 = !!$cvssVectorV2)
    #set ($hasCvssV3 = !!$cvssVectorV3)
    #set ($hasCvssV4 = !!$cvssVectorV4)
    ##
<table id="$id">
##    <title>$title</title>
    <tgroup cols="5">
        <colspec colname="COLSPEC0" colnum="1" colwidth="10*" />
        <colspec colname="COLSPEC1" colnum="2" colwidth="16*" />
        <colspec colname="COLSPEC2" colnum="3" colwidth="8*" />
        <colspec colname="COLSPEC3" colnum="4" colwidth="54*" />
        <colspec colname="COLSPEC4" colnum="5" colwidth="12**" />
        <thead>
        <row>
            <entry colname="COLSPEC0" valign="top">Scheme</entry>
            <entry colname="COLSPEC1" valign="top">Source</entry>
            <entry colname="COLSPEC2" valign="top">Overall</entry>
            <entry colname="COLSPEC3" valign="top">CVSS Vector</entry>
            <entry colname="COLSPEC4" valign="top">Severity</entry>
        </row>
        </thead>
        <tbody>
            #if ($hasCvssV4)
                #cvssScoreOverviewTableRow($cvssVectorV4)
            #end
            #if ($hasCvssV3)
                #cvssScoreOverviewTableRow($cvssVectorV3)
            #end
            #if ($hasCvssV2)
                #cvssScoreOverviewTableRow($cvssVectorV2)
            #end
        </tbody>
    </tgroup>
</table>
#end
##
## generates a labelRef for a vector's severity using the overall score
##
#macro (cvssVectorSeverityLabelRef $cvssVector)
    #set ($severity = $vulnerabilityAdapter.getSeverityForVectorScore($cvssVector.getOverallScore()))
    #if ($severity)
        #labelRef($severity.getName())
    #end
#end
##
## generates a single row for the cvssScoreOverviewTable macro
##
#macro (cvssScoreOverviewTableRow $cvssVector)
<row>
    <entry>$cvssVector.getName()</entry>
    <entry>$vulnerabilityAdapter.postProcessCvssSource($cvssVector.getCombinedCvssSource(false))</entry>
    <entry>$cvssVector.getOverallScore()</entry>
    <entry>#cvssVectorLink($cvssVector)</entry>
    <entry>#cvssVectorSeverityLabelRef($cvssVector)</entry>
</row>
#end
##
## Generates a table that contains detailed CVSS Vector information, excluding away overall score, vector and severtity.
## Exploitability, Temporal, Environmental and Adjusted impact are not included when non-modified scores are listed
##
## Scheme    Source                 Base  Impact  Exploitability  Temporal  Environmental  Adjusted impact
## CVSS:2.0  NVD-CNA-NVD            9.3   8.6     10.0                      7.2            10.0
## CVSS:3.1  Microsoft Corporation  10.0  3.9     6.0             10.0      9.1            6.1
##
## If a vector is not present, it will skip the row.
##
#macro (cvssScoreDetailsTable $id $title $vulnerability, $useContextSeverityScores)
    ##
    #set ($cvssVectors = $vulnerability.getCvssSelectionResult())
    ##
    #if ($useContextSeverityScores)
        #set ($cvssVectorV2 = $cvssVectors.getContextCvss2())
        #set ($cvssVectorV3 = $cvssVectors.getContextCvss3())
        #set ($cvssVectorV4 = $cvssVectors.getContextCvss4())
    #else
        #set ($cvssVectorV2 = $cvssVectors.getInitialCvss2())
        #set ($cvssVectorV3 = $cvssVectors.getInitialCvss3())
        #set ($cvssVectorV4 = $cvssVectors.getInitialCvss4())
    #end
    ##
    #set ($hasCvssV2 = !!$cvssVectorV2)
    #set ($hasCvssV3 = !!$cvssVectorV3)
    #set ($hasCvssV4 = !!$cvssVectorV4)
    ##
    #set ($hasTemporal = $vulnerabilityAdapter.hasTemporalScore($cvssVectorV2, $cvssVectorV3, $cvssVectorV4))
    #set ($hasEnvironmental = $vulnerabilityAdapter.hasEnvironmentalScore($cvssVectorV2, $cvssVectorV3, $cvssVectorV4))
    #set ($hasAdjustedImpact = $vulnerabilityAdapter.hasAdjustedImpactScore($cvssVectorV2, $cvssVectorV3, $cvssVectorV4))
    ##
    ##
<table id="$id">
##    <title>$title</title>
    ## decide how many columns are required to display the required information and adjust the column sizes
    #set ($columnCount = 5)
    #if ($hasTemporal) #set ($columnCount = $columnCount + 1) #end
    #if ($hasEnvironmental) #set ($columnCount = $columnCount + 1) #end
    #if ($hasAdjustedImpact) #set ($columnCount = $columnCount + 1) #end
    #set ($additionalColumnsWidth = 74 / ($columnCount - 2))
    #set ($columnIndex = 6)
    ##
    <tgroup cols="$columnCount">
        <colspec colname="COLSPEC1" colnum="1" colwidth="10*" />
        <colspec colname="COLSPEC2" colnum="2" colwidth="16*" />
        <colspec colname="COLSPEC3" colnum="3" colwidth="$additionalColumnsWidth*" />
        <colspec colname="COLSPEC4" colnum="4" colwidth="$additionalColumnsWidth*" />
        <colspec colname="COLSPEC5" colnum="5" colwidth="$additionalColumnsWidth*" />
        #if ($hasTemporal)
            <colspec colname="COLSPEC6" colnum="$columnIndex" colwidth="$additionalColumnsWidth*" />
            #set ($columnIndex = $columnIndex + 1)
        #end
        #if ($hasEnvironmental)
            <colspec colname="COLSPEC7" colnum="$columnIndex" colwidth="$additionalColumnsWidth*" />
            #set ($columnIndex = $columnIndex + 1)
        #end
        #if ($hasAdjustedImpact)
            <colspec colname="COLSPEC8" colnum="$columnIndex" colwidth="$additionalColumnsWidth*" />
        #end
        ##
        <thead>
        <row>
            <entry colname="COLSPEC1" valign="top">$utils.getText("general.short.scheme")</entry>
            <entry colname="COLSPEC2" valign="top">$utils.getText("general.short.source")</entry>
            <entry colname="COLSPEC3" valign="top">$utils.getText("general.short.base")</entry>
            <entry colname="COLSPEC4" valign="top">$utils.getText("general.short.impact")</entry>
            <entry colname="COLSPEC5" valign="top">$utils.getText("general.short.exploitability")</entry>
            #if ($hasTemporal)
                <entry colname="COLSPEC6" valign="top">$utils.getText("general.short.temporal")</entry>
            #end
            #if ($hasEnvironmental)
                <entry colname="COLSPEC7" valign="top">$utils.getText("general.short.environmental")</entry>
            #end
            #if ($hasAdjustedImpact)
                <entry colname="COLSPEC8" valign="top">$utils.getText("general.short.adjusted-impact")</entry>
            #end
        </row>
        </thead>
        ##
        <tbody>
            #if ($hasCvssV4)
                #cvssScoreDetailsTableRow($cvssVectorV4, $hasTemporal, $hasEnvironmental, $hasAdjustedImpact)
            #end
        #if ($hasCvssV3)
            #cvssScoreDetailsTableRow($cvssVectorV3, $hasTemporal, $hasEnvironmental, $hasAdjustedImpact)
        #end
        #if ($hasCvssV2)
            #cvssScoreDetailsTableRow($cvssVectorV2, $hasTemporal, $hasEnvironmental, $hasAdjustedImpact)
        #end
        </tbody>
    </tgroup>
</table>
#end
##
## returns "&nbsp;" if the value returns true on Double.isNaN, otherwise the value itself
##
#macro (emptyIfNaN $value)#if ($Double.isNaN($value))&nbsp;#else$value#end#end
##
## generates a single row for the cvssScoreDetailsTable macro
##
#macro (cvssScoreDetailsTableRow $cvssVector $hasTemporal, $hasEnvironmental, $hasAdjustedImpact)
    #set ($bakedScores = $cvssVector.getBakedScores())
<row>
    <entry>$cvssVector.getName()</entry>
    <entry>$vulnerabilityAdapter.postProcessCvssSource($cvssVector.getCombinedCvssSource(false))</entry>
    <entry>#emptyIfNaN($bakedScores.getBaseScore())</entry>
    <entry>#emptyIfNaN($bakedScores.getImpactScore())</entry>
    <entry>#emptyIfNaN($bakedScores.getExploitabilityScore())</entry>
    #if ($vulnerabilityAdapter.hasTemporalScore($cvssVector))
        <entry>$bakedScores.getTemporalScore()</entry>
    #elseif ($hasTemporal)
        <entry>&nbsp;</entry>
    #end
    #if ($vulnerabilityAdapter.hasEnvironmentalScore($cvssVector))
        <entry>$bakedScores.getEnvironmentalScore()</entry>
    #elseif ($hasEnvironmental)
        <entry>&nbsp;</entry>
    #end
    #if ($vulnerabilityAdapter.hasAdjustedImpactScore($cvssVector))
        <entry>$bakedScores.getAdjustedImpactScore()</entry>
    #elseif ($hasAdjustedImpact)
        <entry>&nbsp;</entry>
    #end
</row>
#end
##
## has three possible states:
## - both unmodified and modified charts are present: generate a table with two charts
## - only unmodified or modified is present:          generate a table with a single chart
## - no charts are present:                           do not generate anything in this case
##
## the charts are SVGs stored in files in the resources directory. they are either generated when the VAD is generated
## or when the dedicated goal from artifact-analysis is called.
##
#macro (cvssScoreChartsTable $id $title $vulnerability)
    #set ($vulnerabilityName=$vulnerability.getId())
    ## the chart is a file in the resources directory
    #set ($chartModifiedFilePath     = "resources/svg/cvss_modified_${vulnerabilityName}.svg")
    #set ($chartModifiedFileExists   = $vulnerabilityAdapter.fileExists("${targetReportDir}/${chartModifiedFilePath}"))
    #set ($chartUnmodifiedFilePath   = "resources/svg/cvss_unmodified_${vulnerabilityName}.svg")
    #set ($chartUnmodifiedFileExists = $vulnerabilityAdapter.fileExists("${targetReportDir}/${chartUnmodifiedFilePath}"))
    ##
    ##
    #if ($chartUnmodifiedFileExists || $chartModifiedFileExists)
    <table id="$id">
## the charts are currently the only section with a table caption
        <title>$title</title>
        <tgroup cols="2">
            <colspec colname="COLSPEC1" colnum="1" colwidth="50*" />
            <colspec colname="COLSPEC2" colnum="2" colwidth="50*" />
            <thead>
            <row>
                <entry colname="COLSPEC1" valign="top">$utils.getText("inventory-report-vulnerability.short.initial-cvss")</entry>
                <entry colname="COLSPEC2" valign="top">$utils.getText("inventory-report-vulnerability.short.context-cvss")</entry>
            </row>
            </thead>
            <tbody>
            <row>
                #if ($chartUnmodifiedFileExists)
                    <entry>
                        <image href="$chartUnmodifiedFilePath" width="260" alt="$title Unmodified" align="center"/>
                    </entry>
                #else
                    <entry>$utils.getText("inventory-report-vulnerability.no-initial-cvss-chart")</entry>
                #end
                #if ($chartModifiedFileExists)
                    <entry>
                        <image href="$chartModifiedFilePath" width="260" alt="$title Modified" align="center"/>
                    </entry>
                #else
                    <entry>$utils.getText("inventory-report-vulnerability.no-initial-cvss-chart")</entry>
                #end
            </row>
            </tbody>
        </tgroup>
    </table>
    #end
#end
##
#macro(affectedAssetsTable $vulnerability $affectedAssets $title)
    #if ($affectedAssets.size() > 0)
        #if ($vulnerability)
            #set ($vulnerabilityName = $vulnerability.getId())
        #else
            #set ($vulnerabilityName = "")
        #end
        #set ($vulnerabilityNameTextEscaped = $report.xmlEscapeString($vulnerabilityName))
        #set ($vulnerabilityNameIdEscaped = $report.xmlEscapeStringAttribute($vulnerabilityName))

        #if ($utils.notEmpty($vulnerabilityName))
        <table id="${vulnerabilityNameIdEscaped}_affected_assets">
        #else
        <table id="$report.xmlEscapeStringAttribute($title)">
        #end

##        <title>$title</title>
        <tgroup cols="3">
            <colspec colname="COLSPEC0" colnum="1" colwidth="50*"/>
            <colspec colname="COLSPEC1" colnum="2" colwidth="20*"/>
            <colspec colname="COLSPEC2" colnum="3" colwidth="30*"/>

        <thead>
        <row>
            <entry colname="COLSPEC0" valign="top">$utils.getText("general.short.asset-name")</entry>
            <entry colname="COLSPEC1" valign="top">$utils.getText("general.short.asset-type")</entry>
            <entry colname="COLSPEC2" valign="top">$utils.getText("general.short.asset-version")</entry>
        </row>
        </thead>

        <tbody>
            #foreach ($asset in $affectedAssets)
            <row>
                <entry>
                    #if($report.isAssetBomReportEnabled())
                        <xref href="tpc_asset-contained-components.dita#asset-$report.xmlEscapeStringAttribute
                        ($asset)" type="topic">
                        $report.xmlEscapeString($asset.get("Name"))
                        </xref>
                    #else
                        $report.xmlEscapeString($asset.get("Name"))
                    #end
                </entry>
                <entry>$report.xmlEscapeString($asset.get("Type"))</entry>
                <entry>
                    <codeph>$report.xmlEscapeGAV($asset.get("Version"))</codeph>
                </entry>
            </row>
            #end
        </tbody>
    </tgroup>
    </table>
    #else
       $utils.getText("general.no-affected-components")
    #end
#end
##
#macro(affectedComponentsTable $vulnerability $affectedComponents $title)
    #if ($affectedComponents.size() > 0)
        ##
        #if ($vulnerability)
            #set ($vulnerabilityName = $vulnerability.getId())
        #else
            #set ($vulnerabilityName = "")
        #end
        #set ($vulnerabilityNameTextEscaped = $report.xmlEscapeString($vulnerabilityName))
        #set ($vulnerabilityNameIdEscaped = $report.xmlEscapeStringAttribute($vulnerabilityName))
        ##
        #set ($containsMsRemediationInformation = $vulnerabilityAdapter.hasVulnerabilityMicrosoftRemediationInformationOnArtifact($vulnerability, $affectedComponents))

        #if ($utils.notEmpty($vulnerabilityName))
        <table id="${vulnerabilityNameIdEscaped}_affected_components">
        #else
        <table id="$report.xmlEscapeStringAttribute($title)">
        #end

##        <title>$title</title>
        #if ($containsMsRemediationInformation)
        <tgroup cols="4">
            <colspec colname="COLSPEC0" colnum="1" colwidth="30*"/>
            <colspec colname="COLSPEC1" colnum="2" colwidth="40*"/>
            <colspec colname="COLSPEC2" colnum="3" colwidth="14*"/>
            <colspec colname="COLSPEC3" colnum="4" colwidth="16*"/>
        #else
        <tgroup cols="3">
            <colspec colname="COLSPEC0" colnum="1" colwidth="40*"/>
            <colspec colname="COLSPEC1" colnum="2" colwidth="46*"/>
            <colspec colname="COLSPEC2" colnum="3" colwidth="14*"/>
        #end

        <thead>
        <row>
            <entry colname="COLSPEC0" valign="top">$utils.getText("general.short.components")</entry>
            <entry colname="COLSPEC1" valign="top">$utils.getText("general.short.artifact-id")</entry>
            <entry colname="COLSPEC2" valign="top">Version</entry>
            #if ($containsMsRemediationInformation)
                <entry colname="COLSPEC3" valign="top">$utils.getText("inventory-report-vulnerability.short.ms-remediation")</entry>
            #end
        </row>
        </thead>

        <tbody>
            #foreach ($artifact in $affectedComponents)
            <row>
                <entry>$report.xmlEscapeString($artifact.get("Component"))</entry>
                <entry>
                    <codeph>$report.xmlEscapeArtifactId($artifact.get("Id"))</codeph>
                </entry>
                <entry>
                    <codeph>$report.xmlEscapeGAV($artifact.get("Version"))</codeph>
                </entry>
                #if($containsMsRemediationInformation)
                    <entry>
                        #set($msRemediationUrlDescription = $vulnerabilityAdapter.getMicrosoftRemediationUrlAndDescriptionForVulnerabilityOnArtifact($vulnerability, $artifact))
                        #if($msRemediationUrlDescription.size() > 0)
                            <p>
                                ## must be lowest indentation, otherwise CSV will not work
#set ($indexCounter = 0)
#foreach($entry in $msRemediationUrlDescription.entrySet())#if ($indexCounter != 0), #end<xref href="$entry.getKey()" type="html" scope="external">$entry.getValue()</xref>#set ($indexCounter = $indexCounter + 1)#end
                            </p>
                        #end
                    </entry>
                #end
            </row>
            #end
        </tbody>
    </tgroup>
    </table>
    #else
       $utils.getText("general.no-affected-components")
    #end
#end
##
##
#macro (statisticsOverviewTable $id $title $vulnerabilities $filterAdvisory $useModified)
    #if ($useModified)
        #set ($overviewTableData = $vulnerabilityAdapter.generateOverviewTable($vulnerabilities, true, $filterAdvisory))
    #else
        #set ($overviewTableData = $vulnerabilityAdapter.generateOverviewTable($vulnerabilities, false, $filterAdvisory))
    #end
    #if(!$overviewTableData.isEmpty())
        <table id="$id">
            <title>$title</title>
            #set ($rows = $overviewTableData.getRows())
            #set ($headers = $overviewTableData.getHeaders())
            <tgroup cols="$headers.size()">
                #foreach($index in [1..$headers.size()])
                    <colspec colname="COLSPEC$index" colnum="$index" colwidth="1*" valign="middle"/>
                #end
                <thead>
                <row>
                    #foreach($header in $headers)
                        <entry>$header</entry>
                    #end
                </row>
                </thead>
                <tbody>
                    #foreach($row in $rows)
                        #set ($columnValues = $row.getTableRowValues())
                    <row>
                        #set ($isFirst = true)
                        #foreach($columnValue in $columnValues)
                            #if ($isFirst)
                                #set ($isFirst = false)
                                <entry>#labelRef($vulnerabilityAdapter.naIfNull($columnValue))</entry>
                            #else
                                <entry>$columnValue</entry>
                            #end
                        #end
                    </row>
                    #end
                </tbody>
            </tgroup>
        </table>
    #end
#end
##
## Escalate      (15.9 from base score 8.9)
## Criteria      Explanation
## CVSS Overall  CVSS:4.0 Assessment-all
##               provides the vector: CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:H/VI:H/VA:H/SC:H/SI:H/SA:H/CR:M/IR:M/AR:M/MAV:A
## Keywords      external attacker
## EPSS          This vulnerability has a 97.56% chance of being exploited in the next 30 days according to FIRST. It ranks in the top 0.00%% of all scored vulnerabilities.
## KEV           This vulnerability, affecting Apache Log4j2, has been confirmed to have been exploited in the wild.
##               Furthermore, it has been identified in ransomware campaigns.
##               Summary: Apache Log4j2 Remote Code Execution Vulnerability. For all affected software assets for which updates exist, the only acceptable remediation actions are: 1) Apply updates; OR 2) remove affected assets from agency networks.
##               Due Date: 2021-12-24
##               Publish Date: 2021-12-10
## EOL           log4j (ver. 2) is still supported by it's vendor.
##               Support End Date: no date provided
##               Vendor does not provide extended support for this product.
##
#macro(vulnerabilityPriorityScoreTable $vulnerability $securityConfiguration)
    #set ($priorityData = $vulnerability.calculatePriorityScore($securityConfiguration))

    #if ($priorityData.isElevated())
        #set ($labelName = "priority-severity-" + $priorityData.getResultingSeverityRange().getName())
        #labelRef($labelName) (<b>$priorityData.getResultingScore()</b> $utils.getText("inventory-report-vulnerability.from-base-score") <b>$priorityData.getCvssScore()</b>)
    #else
        #set ($labelName = "priority-severity-standard")
        #labelRef($labelName) $utils.getText("inventory-report-vulnerability.no-elevated-priority")
    #end

    <table id="${vulnerability}-priority-score-table">
        <tgroup cols="2">
            <colspec colname="COLSPEC0" colnum="1" colwidth="12*"/>
            <colspec colname="COLSPEC1" colnum="2" colwidth="88*"/>
            <thead>
            <row>
                <entry>$utils.getText("general.short.criteria")</entry>
                <entry>$utils.getText("general.short.explanation")</entry>
            </row>
            </thead>
            <tbody>
            <row>
                <entry>$utils.getText("inventory-report-vulnerability.short.cvss-overall")</entry>
                <entry>
                    #set ($vector = $report.xmlEscapeContentString($priorityData.getCalculator().getBaseCvssVector().toString()))
                    #set ($link = $report.xmlEscapeContentString($priorityData.getCalculator().getBaseCvssVector().getWebEditorLink()))
                    #if ($utils.notEmpty($vector))
<lines><i>$priorityData.getCalculator().getBaseCvssVector().getCombinedCvssSource(true)</i> $utils.getText("inventory-report-vulnerability.provides-the-vector")
<codeph><xref href="$link" type="html" scope="external">$vector</xref></codeph></lines>
                    #else
                        $utils.getText("inventory-report-vulnerability.no-cvss-vector")
                    #end
                </entry>
            </row>
            <row>
                <entry>$utils.getText("general.short.keywords")</entry>
                <entry>
                    #if ($priorityData.getCalculator().getKeywords() && !$priorityData.getCalculator().getKeywords().getKeywordSets().isEmpty())
                        <lines>#foreach($keywordSet in $priorityData.getCalculator().getKeywords().getKeywordSets())#if ($foreach.index > 0)

#end<b>$keywordSet.getName()</b>#if ($keywordSet.getNotes()): $keywordSet.getNotes()#end#end</lines>
                    #else
                       $utils.getText("inventory-report-vulnerability.no-keywords-matched")
                    #end
                </entry>
            </row>
            <row>
                <entry>EPSS</entry>
                <entry>
                    #if ($priorityData.getCalculator().getEpssData())
<lines>This vulnerability has a <b>$priorityData.getCalculator().getEpssData().getEpssScoreAsPercentage()</b> chance of being exploited in the next 30 days according to <xref href="https://www.first.org/epss" type="html" scope="external">FIRST</xref>.
It ranks in the top <b>$priorityData.getCalculator().getEpssData().getTopRatedPercentileAsPercentage()</b> of all scored vulnerabilities.</lines>
                    #else
                        No EPSS score available.
                    #end
                </entry>
            </row>
            <row>
                <entry>KEV</entry>
                <entry>
                    #set ($kev = $priorityData.getCalculator().getKevData())
                    #if ($kev)
                        <lines>This vulnerability, affecting <b>$report.xmlEscapeString($kev.getVendor()) $report.xmlEscapeString($kev.getProduct())</b>, has been <b>confirmed to have been exploited in the wild</b>.</lines>
                        #if ($kev.getRansomwareState() == "KNOWN")
                            <lines>Furthermore, it has been <b>identified in ransomware campaigns</b>.</lines>
                        #end
<lines>  #if ($kev.getSummary())<b>Summary:</b> $report.xmlEscapeString($kev.getSummary()). #end#if ($kev.getRecommendation())$report.xmlEscapeString($kev.getRecommendation())#end</lines>
                        #if ($kev.getNotes())
                            <lines>  <b>Notes:</b> $report.xmlEscapeString($kev.getNotes())</lines>
                        #end
                        #if ($kev.getDueDate())
                            <lines>  <b>Due Date:</b> $vulnerabilityAdapter.formatDate($kev.getDueDate())</lines>
                        #end
                        #if ($kev.getPublishDate())
                            <lines>  <b>Publish Date:</b> $vulnerabilityAdapter.formatDate($kev.getPublishDate())</lines>
                        #end
                        #if ($kev.getExploitDate())
                            <lines>  <b>Exploit Date:</b> $vulnerabilityAdapter.formatDate($kev.getExploitDate())</lines>
                        #end
                    #else
                        This vulnerability has not been confirmed to have been exploited in the wild.
                    #end
                </entry>
            </row>
            <row>
                <entry>EOL</entry>
                #set ($eolReasoning = $vulnerabilityAdapter.getEolReasoning($priorityData))
                #if ($eolReasoning)
                    <entry>
                        <lines><xref href="$eolReasoning.getEscapedLink()" type="html" scope="external">$eolReasoning.getProduct()</xref> (ver. $eolReasoning.getVersion()) $eolReasoning.getSupportStatus().
$eolReasoning.getRegularSupportEndInfo()
$eolReasoning.getExtendedSupportEndInfo()</lines>
                    </entry>
                #else
                    <entry>
                        No end-of-life (EOL) information available.
                    </entry>
                #end
            </row>
            <row>
                <entry>Assessment</entry>
                #set ($statusReasoning = $vulnerabilityAdapter.getPriorityVulnerabilityStatusReasoning($priorityData))
                #if ($statusReasoning)
                    <entry>
                        $statusReasoning
                    </entry>
                #else
                    <entry>
                        No assessment information available.
                    </entry>
                #end
            </row>
            </tbody>
        </tgroup>
    </table>
#end
##