# access several different versions of the vulnerability list for different use-cases
#set ($vulnerabilitiesAll = $vulnerabilityAdapter.getEffectiveVulnerabilitiesAll())
#set ($ulnerabilitiesInitial = $vulnerabilityAdapter.getEffectiveVulnerabilitiesInitialInventoryAll())
#set ($vulnerabilitiesForDetailsReport = $vulnerabilityAdapter.getEffectiveVulnerabilitiesForDetails())
#
# Switch to be used on overview level.
#   In case no vulnerabilities are available the switch will have the value 'none'; 'report' otherwise.
ae.vulnerability.report.overview.switch=#if ($vulnerabilitiesAll.isEmpty())
none
#else
report
#end
ae.vulnerability.report.overview.root.switch=#if ($vulnerabilitiesAll.isEmpty())
/
#else
gen/
#end
# Switch to be used on vulnerability detail level.
#   If no vulnerabilities are available to be detailed the switch is 'none'; 'report' otherwise.
ae.vulnerability.report.details.switch=#if ($vulnerabilitiesForDetailsReport.isEmpty())
none
#else
report
#end
ae.vulnerability.report.details.root.switch=#if ($vulnerabilitiesForDetailsReport.isEmpty())
/
#else
gen/
#end

# vulnerability statistics
#set ($overviewTableContextAbstractedAllVulnerabilities = $vulnerabilityAdapter.generateOverviewTable($vulnerabilitiesAll, true, "", "abstracted"))
#set ($overviewTableContextUnmodifiedAllVulnerabilities = $vulnerabilityAdapter.generateOverviewTable($vulnerabilitiesAll, true, "", "unmodified"))

#set ($overviewTableInitialAbstractedAllVulnerabilities = $vulnerabilityAdapter.generateOverviewTable($ulnerabilitiesInitial, true, "", "abstracted"))
#set ($overviewTableInitialUnmodifiedAllVulnerabilities = $vulnerabilityAdapter.generateOverviewTable($ulnerabilitiesInitial, true, "", "unmodified"))
# status mapper:          abstracted
# cvss selection:         context
# status:                 per property
# cvss severity category: any
ae.vulnerability.report.count.context.abstracted.affected=$overviewTableContextAbstractedAllVulnerabilities.getStatusCount("affected")
ae.vulnerability.report.count.context.abstracted.not-affected=$overviewTableContextAbstractedAllVulnerabilities.getStatusCount("not affected")
ae.vulnerability.report.count.context.abstracted.potentially-affected=$overviewTableContextAbstractedAllVulnerabilities.getStatusCount("potentially affected")

# status mapper:          unmodified
# cvss selection:         context
# status:                 per property
# cvss severity category: any
ae.vulnerability.report.count.context.unmodified.applicable=$overviewTableContextUnmodifiedAllVulnerabilities.getStatusCount("applicable")
ae.vulnerability.report.count.context.unmodified.not-applicable=$overviewTableContextUnmodifiedAllVulnerabilities.getStatusCount("not applicable")
ae.vulnerability.report.count.context.unmodified.in-review=$overviewTableContextUnmodifiedAllVulnerabilities.getStatusCount("in review")
ae.vulnerability.report.count.context.unmodified.insignificant=$overviewTableContextUnmodifiedAllVulnerabilities.getStatusCount("insignificant")
ae.vulnerability.report.count.context.unmodified.void=$overviewTableContextUnmodifiedAllVulnerabilities.getStatusCount("void")

# status mapper:          abstracted
# cvss selection:         context
# status:                 affected + potentially affected
# cvss severity category: per property
#set ($count = $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("critical", "affected") + $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("critical", "potentially affected"))
ae.vulnerability.report.count.context.abstracted.all-affected.critical=$count
#set ($count = $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("high", "affected") + $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("high", "potentially affected"))
ae.vulnerability.report.count.context.abstracted.all-affected.high=$count
#set ($count = $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("medium", "affected") + $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("medium", "potentially affected"))
ae.vulnerability.report.count.context.abstracted.all-affected.medium=$count
#set ($count = $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("low", "affected") + $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("low", "potentially affected"))
ae.vulnerability.report.count.context.abstracted.all-affected.low=$count
#set ($count = $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("none", "affected") + $overviewTableContextAbstractedAllVulnerabilities.getIntersectionCount("none", "potentially affected"))
ae.vulnerability.report.count.context.abstracted.all-affected.none=$count

# status mapper:          abstracted
# cvss selection:         initial
# status:                 per property
# cvss severity category: any
ae.vulnerability.report.count.initial.abstracted.affected=$overviewTableInitialAbstractedAllVulnerabilities.getStatusCount("affected")
ae.vulnerability.report.count.initial.abstracted.not-affected=$overviewTableInitialAbstractedAllVulnerabilities.getStatusCount("not affected")
ae.vulnerability.report.count.initial.abstracted.potentially-affected=$overviewTableInitialAbstractedAllVulnerabilities.getStatusCount("potentially affected")

# status mapper:          unmodified
# cvss selection:         initial
# status:                 per property
# cvss severity category: any
ae.vulnerability.report.count.initial.unmodified.applicable=$overviewTableInitialUnmodifiedAllVulnerabilities.getStatusCount("applicable")
ae.vulnerability.report.count.initial.unmodified.not-applicable=$overviewTableInitialUnmodifiedAllVulnerabilities.getStatusCount("not applicable")
ae.vulnerability.report.count.initial.unmodified.in-review=$overviewTableInitialUnmodifiedAllVulnerabilities.getStatusCount("in review")
ae.vulnerability.report.count.initial.unmodified.insignificant=$overviewTableInitialUnmodifiedAllVulnerabilities.getStatusCount("insignificant")
ae.vulnerability.report.count.initial.unmodified.void=$overviewTableInitialUnmodifiedAllVulnerabilities.getStatusCount("void")

# status mapper:          abstracted
# cvss selection:         initial
# status:                 affected + potentially affected
# cvss severity category: per property
#set ($count = $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("critical", "affected") + $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("critical", "potentially affected"))
ae.vulnerability.report.count.initial.abstracted.all-affected.critical=$count
#set ($count = $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("high", "affected") + $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("high", "potentially affected"))
ae.vulnerability.report.count.initial.abstracted.all-affected.high=$count
#set ($count = $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("medium", "affected") + $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("medium", "potentially affected"))
ae.vulnerability.report.count.initial.abstracted.all-affected.medium=$count
#set ($count = $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("low", "affected") + $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("low", "potentially affected"))
ae.vulnerability.report.count.initial.abstracted.all-affected.low=$count
#set ($count = $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("none", "affected") + $overviewTableInitialAbstractedAllVulnerabilities.getIntersectionCount("none", "potentially affected"))
ae.vulnerability.report.count.initial.abstracted.all-affected.none=$count

# generation statistics

# timestamps of the first and latest inventory enrichment step that the inventory was processed by during the advisor phase
# timestamps are equal to 0 if no inventory enrichment step was processed on the inventory
#set($time = $vulnerabilityAdapter.getInventoryEnrichmentFirstStepTime())
ae.vulnerability.advisor.time.step.first.timestamp=$time.getTime()
ae.vulnerability.advisor.time.step.first.en=$time.getEn()
ae.vulnerability.advisor.time.step.first.de=$time.getDe()

#set($time = $vulnerabilityAdapter.getInventoryEnrichmentLatestStepTime())
ae.vulnerability.advisor.time.step.latest.timestamp=$time.getTime()
ae.vulnerability.advisor.time.step.latest.en=$time.getEn()
ae.vulnerability.advisor.time.step.latest.de=$time.getDe()



$vulnerabilityAdapter.generateEnrichmentTimestamps()
##ae.vulnerability.advisor.time.step.nvd-cpe-vulnerabilities.de=$time.getDe()
$vulnerabilityAdapter.generateIndexTimestamps()
##ae.vulnerability.mirror.index.cert-fr.update-timestamp=12983489854985
##ae.vulnerability.mirror.index.cert-eu.update-timestamp=12983489854985
$vulnerabilityAdapter.generateDownloadTimestamps()
##ae.vulnerability.mirror.download.cert-fr.update-timestamp=12983489854985
##ae.vulnerability.mirror.download.cert-eu.update-timestamp=12983489854985