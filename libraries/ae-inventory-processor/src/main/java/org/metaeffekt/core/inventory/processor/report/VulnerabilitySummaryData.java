/*
 * Copyright 2009-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.metaeffekt.core.inventory.processor.report;

import org.metaeffekt.core.inventory.processor.model.Inventory;
import org.metaeffekt.core.inventory.processor.model.InventoryInfo;
import org.metaeffekt.core.inventory.processor.model.VulnerabilityMetaData;

import java.util.List;

public class VulnerabilitySummaryData {

    private String periodFrom;
    private String periodTo;

    private LabelData severityAffectedLabel;
    private LabelData severityPotentiallyAffectedLabel;
    private LabelData severityNotAffectedLabel;

    public VulnerabilitySummaryData(Inventory inventory, VulnerabilityReportAdapter vulnerabilityReportAdapter, String preference) {

        final InventoryInfo inventoryInfo = inventory.findInventoryInfo("cert-periodic-query");
        if (inventoryInfo != null) {
            this.periodFrom = inventoryInfo.get("Range Start");
            this.periodTo = inventoryInfo.get("Range End");
        }

        final List<VulnerabilityMetaData> vulnerabilityMetaDataList = inventory.getVulnerabilityMetaData();

        double maxAffectedScore = 0.0;
        double maxPotentiallyAffectedScore = 0.0;
        double maxNotAffectedScore = 0.0;

        VulnerabilityMetaData maxAffectedVmd = null;
        VulnerabilityMetaData maxPotentiallyAffectedVmd = null;
        VulnerabilityMetaData maxNotAffectedVmd = null;

        for (VulnerabilityMetaData vmd : vulnerabilityMetaDataList) {

            String score = vulnerabilityReportAdapter.getModifiedCvssScoreByScoringPreference(vmd, preference);
            if (score.equalsIgnoreCase("N/A")) {
                score = vulnerabilityReportAdapter.getUnmodifiedCvssScoreByScoringPreference(vmd, preference);
            }
            if (!score.equalsIgnoreCase("N/A")) {
                final double scoreDouble = Double.parseDouble(score);
                if (vmd.isStatus("applicable")) {
                    if (Double.compare(scoreDouble, maxAffectedScore) >= 0) {
                        maxAffectedScore = scoreDouble;
                        maxAffectedVmd = vmd;
                    }
                }
                if (vmd.isStatus("in review") || vmd.isStatus("insignificant") || vmd.isStatus("")) {
                    if (Double.compare(scoreDouble, maxPotentiallyAffectedScore) >= 0) {
                        maxPotentiallyAffectedScore = scoreDouble;
                        maxPotentiallyAffectedVmd = vmd;
                    }
                }
                if (vmd.isStatus("void") || vmd.isStatus("not applicable")) {
                    if (Double.compare(scoreDouble, maxNotAffectedScore) >= 0) {
                        maxNotAffectedScore = scoreDouble;
                        maxNotAffectedVmd = vmd;
                    }
                }
            }
        }

        this.severityAffectedLabel = createLabel(maxAffectedVmd, preference, vulnerabilityReportAdapter);
        this.severityPotentiallyAffectedLabel = createLabel(maxPotentiallyAffectedVmd, preference, vulnerabilityReportAdapter);
        this.severityNotAffectedLabel = createLabel(maxNotAffectedVmd, preference, vulnerabilityReportAdapter);

    }

    private LabelData createLabel(VulnerabilityMetaData vmd, String preference, VulnerabilityReportAdapter vulnerabilityReportAdapter) {
        String severity = vmd != null ?
                vulnerabilityReportAdapter.getModifiedCvssSeverityByScoringPreference(vmd, preference) :
                "None";

        if ("N/A".equalsIgnoreCase(severity)) {
            severity = vulnerabilityReportAdapter.getUnmodifiedCvssSeverityByScoringPreference(vmd,preference);
        }

        if ("N/A".equalsIgnoreCase(severity)) {
            severity = "None";
        }

        return new LabelData(severity, VulnerabilityReportAdapter.
                getLabelColor(vulnerabilityReportAdapter.getSeverityLabelColor(severity)));
    }

    public LabelData getSeverityAffectedLabel() {
        return severityAffectedLabel;
    }

    public LabelData getSeverityPotentiallyAffectedLabel() {
        return severityPotentiallyAffectedLabel;
    }

    public LabelData getSeverityNotAffectedLabel() {
        return severityNotAffectedLabel;
    }

    public String getPeriodFrom() {
        return periodFrom;
    }

    public String getPeriodTo() {
        return periodTo;
    }
}
