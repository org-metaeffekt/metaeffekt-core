/*
 * Copyright 2009-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.metaeffekt.core.inventory.processor.patterns.contributors;

import org.metaeffekt.core.inventory.processor.model.ComponentPatternData;

import java.io.File;
import java.util.Collections;
import java.util.List;

public abstract class ComponentPatternContributor {

    /**
     * Checks whether the contributor can work with the given file.
     * @param pathInContext a partial path for running the check on; might not be a real path
     * @return returns whether this contributor can do something with the given file
     */
    public abstract boolean applies(String pathInContext);

    /**
     * Runs the contributor and tries to create component patterns from the given baseDir and anchor.
     * @param baseDir the directory that other files are contained in
     * @param relativeAnchorFilePath anchor relative to basedir
     * @param checksum a checksum of the file that is being used as an anchor
     * @return component patterns generated by the rules of the contribute method
     */
    public List<ComponentPatternData> contribute(File baseDir, String relativeAnchorFilePath, String checksum) {
        return Collections.emptyList();
    }

    /**
     * Get a list of suffixes that this contributor may be able to use an an anchor.<br>
     * Note that this is not limited to filename extensions.
     * @return a list of supported file suffixes
     */
    public abstract List<String> getSuffixes();
}
