/*
 * Copyright 2009-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.metaeffekt.core.inventory.processor.report.model.aeaa.vulnerabilitystatus;

import org.json.JSONArray;
import org.json.JSONObject;
import org.metaeffekt.core.inventory.processor.report.model.aeaa.AeaaContentIdentifiers;
import org.metaeffekt.core.inventory.processor.report.model.aeaa.AeaaTimeUtils;
import org.metaeffekt.core.inventory.processor.report.model.aeaa.AeaaVulnerability;
import org.metaeffekt.core.security.cvss.CvssSource;
import org.metaeffekt.core.security.cvss.CvssVector;
import org.metaeffekt.core.security.cvss.KnownCvssEntities;
import org.metaeffekt.core.security.cvss.MultiScoreCvssVector;
import org.metaeffekt.core.security.cvss.v2.Cvss2;
import org.metaeffekt.core.security.cvss.v3.Cvss3P1;
import org.metaeffekt.core.security.cvss.v4P0.Cvss4P0;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;

import java.util.*;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.stream.Collectors;

/**
 * Mirrors structure of <code>com.metaeffekt.artifact.analysis.vulnerability.enrichment.vulnerabilitystatus.VulnerabilityStatus</code>
 * until separation of inventory report generation from ae core inventory processor.
 */
public class AeaaVulnerabilityStatus {

    private final static Logger LOG = LoggerFactory.getLogger(AeaaVulnerabilityStatus.class);

    private Scope scope = Scope.ARTIFACT;

    private String title;
    private String acceptedBy, acceptedDate, reportedBy, reportedDate;
    private Cvss2 cvss2, cvss2Lower, cvss2Higher;
    private Cvss3P1 cvss3, cvss3Lower, cvss3Higher;
    private Cvss4P0 cvss4, cvss4Lower, cvss4Higher;
    private final List<AeaaVulnerabilityStatusReviewedEntry> reviewedAdvisories = new ArrayList<>();
    private final Set<AeaaVulnerabilityStatusHistoryEntry> statusHistory = new TreeSet<>();


    public AeaaVulnerabilityStatus() {
    }

    public AeaaVulnerabilityStatus setCvss2(Cvss2 cvss2) {
        this.cvss2 = cvss2;
        return this;
    }

    public void setCvss2Lower(Cvss2 cvss2Lower) {
        this.cvss2Lower = cvss2Lower;
    }

    public void setCvss2Higher(Cvss2 cvss2Higher) {
        this.cvss2Higher = cvss2Higher;
    }

    public AeaaVulnerabilityStatus setCvss3P1(Cvss3P1 cvss3) {
        this.cvss3 = cvss3;
        return this;
    }

    public void setCvss3P1Lower(Cvss3P1 cvss3Lower) {
        this.cvss3Lower = cvss3Lower;
    }

    public void setCvss3P1Higher(Cvss3P1 cvss3Higher) {
        this.cvss3Higher = cvss3Higher;
    }

    public AeaaVulnerabilityStatus setCvss4(Cvss4P0 cvss4) {
        this.cvss4 = cvss4;
        return this;
    }

    public void setCvss4Lower(Cvss4P0 cvss4Lower) {
        this.cvss4Lower = cvss4Lower;
    }

    public void setCvss4Higher(Cvss4P0 cvss4Higher) {
        this.cvss4Higher = cvss4Higher;
    }

    public AeaaVulnerabilityStatus setScope(Scope scope) {
        this.scope = scope;
        return this;
    }

    public AeaaVulnerabilityStatus setScope(String scope) {
        this.scope = Scope.fromString(scope);
        return this;
    }

    public AeaaVulnerabilityStatus setAcceptedBy(String acceptedBy) {
        this.acceptedBy = acceptedBy;
        return this;
    }

    public AeaaVulnerabilityStatus setAcceptedDate(String acceptedDate) {
        this.acceptedDate = acceptedDate;
        return this;
    }

    public AeaaVulnerabilityStatus setReportedBy(String reportedBy) {
        this.reportedBy = reportedBy;
        return this;
    }

    public AeaaVulnerabilityStatus setReportedDate(String reportedDate) {
        this.reportedDate = reportedDate;
        return this;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public AeaaVulnerabilityStatus addReviewedAdvisoryEntry(String id, String comment) {
        return addReviewedAdvisoryEntry(new AeaaVulnerabilityStatusReviewedEntry(id, comment));
    }

    public AeaaVulnerabilityStatus addReviewedAdvisoryEntry(String id) {
        return addReviewedAdvisoryEntry(new AeaaVulnerabilityStatusReviewedEntry(id, null));
    }

    public AeaaVulnerabilityStatus addReviewedAdvisoryEntries(Collection<AeaaVulnerabilityStatusReviewedEntry> entries) {
        entries.forEach(this::addReviewedAdvisoryEntry);
        return this;
    }

    public AeaaVulnerabilityStatus addReviewedAdvisoryEntry(AeaaVulnerabilityStatusReviewedEntry entry) {
        // check if the advisory has already been reviewed. in this case, add the comment to the existing entry
        final Optional<AeaaVulnerabilityStatusReviewedEntry> existingEntry = reviewedAdvisories.stream()
                .filter(e -> e.getId().equals(entry.getId()))
                .findFirst();
        if (existingEntry.isPresent()) {
            final String existingComment = existingEntry.get().getComment();
            if (StringUtils.hasText(existingComment) && StringUtils.hasText(entry.getComment())) {
                existingEntry.get().setComment(existingComment + "; " + entry.getComment());
            } else if (StringUtils.hasText(entry.getComment())) {
                existingEntry.get().setComment(entry.getComment());
            } else {
                existingEntry.get().setComment(existingComment);
            }
        } else {
            reviewedAdvisories.add(entry.clone());
        }
        return this;
    }

    public AeaaVulnerabilityStatus addHistoryEntry(AeaaVulnerabilityStatusHistoryEntry entry) {
        statusHistory.add(entry);
        return this;
    }

    public AeaaVulnerabilityStatus addHistoryEntries(Collection<AeaaVulnerabilityStatusHistoryEntry> entries) {
        statusHistory.addAll(entries);
        return this;
    }

    public AeaaVulnerabilityStatus removeHistoryEntry(AeaaVulnerabilityStatusHistoryEntry entry) {
        statusHistory.remove(entry);
        return this;
    }

    public AeaaVulnerabilityStatus clearHistoryEntries() {
        statusHistory.clear();
        return this;
    }

    public List<AeaaVulnerabilityStatusHistoryEntry> getStatusHistory() {
        return Collections.unmodifiableList(new ArrayList<>(statusHistory));
    }

    public Set<AeaaVulnerabilityStatusHistoryEntry> getStatusHistorySet() {
        return statusHistory;
    }

    public Set<AeaaVulnerabilityStatusHistoryEntry> getStatusHistoryModifiable() {
        return statusHistory;
    }

    public AeaaVulnerabilityStatusHistoryEntry getLatestActiveStatusHistoryEntry() {
        return statusHistory.stream()
                .filter(AeaaVulnerabilityStatusHistoryEntry::isActive)
                .findFirst()
                .orElse(null);
    }

    public boolean isLatestStatusHistoryEntryOfType(String type) {
        return type.equals(getLatestActiveStatusHistoryEntry().getStatus());
    }

    public List<AeaaVulnerabilityStatusReviewedEntry> getReviewedAdvisories() {
        return reviewedAdvisories;
    }

    public List<AeaaVulnerabilityStatusReviewedEntry> getReviewedAdvisories(AeaaContentIdentifiers type) {
        return reviewedAdvisories.stream()
                .filter(a -> a.getAdvisor() == type)
                .sorted((Comparator.comparing(a -> a.getAdvisor().name())))
                .collect(Collectors.toList());
    }

    public String getAcceptedBy() {
        return acceptedBy;
    }

    public String getAcceptedDate() {
        return acceptedDate;
    }

    public Date getAcceptedDateAsDate() {
        return AeaaTimeUtils.tryParse(acceptedDate);
    }

    public String getReportedBy() {
        return reportedBy;
    }

    public String getReportedDate() {
        return reportedDate;
    }

    public Date getReportedDateAsDate() {
        return AeaaTimeUtils.tryParse(reportedDate);
    }

    public boolean hasReviewedAdvisories() {
        return !reviewedAdvisories.isEmpty();
    }

    public boolean hasReportedBy() {
        return StringUtils.hasText(reportedBy) || StringUtils.hasText(reportedDate);
    }

    public boolean hasAcceptedBy() {
        return StringUtils.hasText(acceptedBy) || StringUtils.hasText(acceptedDate);
    }

    public String generateAcceptedByDateString() {
        final StringJoiner builder = new StringJoiner(" ");

        if (StringUtils.hasText(acceptedBy)) builder.add(acceptedBy);
        else builder.add("no author");
        if (StringUtils.hasText(acceptedDate)) builder.add("(" + acceptedDate + ")");

        return builder.toString();
    }

    public String generateReportedByDateString() {
        final StringJoiner builder = new StringJoiner(" ");

        if (StringUtils.hasText(reportedBy)) builder.add(reportedBy);
        else builder.add("no author");
        if (StringUtils.hasText(reportedDate)) builder.add("(" + reportedDate + ")");

        return builder.toString();
    }

    public boolean hasAcceptedByInformation() {
        return StringUtils.hasText(acceptedBy) || StringUtils.hasText(acceptedDate);
    }

    public boolean hasReportedByInformation() {
        return StringUtils.hasText(reportedBy) || StringUtils.hasText(reportedDate);
    }

    public Cvss2 getCvss2() {
        return cvss2;
    }

    public Cvss2 getCvss2Lower() {
        return cvss2Lower;
    }

    public Cvss2 getCvss2Higher() {
        return cvss2Higher;
    }

    public Cvss3P1 getCvss3P1() {
        return cvss3;
    }

    public Cvss3P1 getCvss3P1Lower() {
        return cvss3Lower;
    }

    public Cvss3P1 getCvss3P1Higher() {
        return cvss3Higher;
    }

    public Cvss4P0 getCvss4() {
        return cvss4;
    }

    public Cvss4P0 getCvss4Lower() {
        return cvss4Lower;
    }

    public Cvss4P0 getCvss4Higher() {
        return cvss4Higher;
    }

    public boolean hasCvss2() {
        return isCvssDefined(cvss2);
    }

    public boolean hasCvss3P1() {
        return isCvssDefined(cvss3);
    }

    public boolean hasCvss4() {
        return isCvssDefined(cvss4);
    }

    public boolean hasCvss2Lower() {
        return isCvssDefined(cvss2Lower);
    }

    public boolean hasCvss2Higher() {
        return isCvssDefined(cvss2Higher);
    }

    public boolean hasCvss3P1Lower() {
        return isCvssDefined(cvss3Lower);
    }

    public boolean hasCvss3P1Higher() {
        return isCvssDefined(cvss3Higher);
    }

    public boolean hasAnyCvss2Information() {
        return hasCvss2() || hasCvss2Lower() || hasCvss2Higher();
    }

    public boolean hasAnyCvss3P1Information() {
        return hasCvss3P1() || hasCvss3P1Lower() || hasCvss3P1Higher();
    }

    public boolean hasAnyCvss4Information() {
        return hasCvss4() || hasCvss4Lower() || hasCvss4Higher();
    }

    public boolean hasCvss4Lower() {
        return isCvssDefined(cvss4Lower);
    }

    public boolean hasCvss4Higher() {
        return isCvssDefined(cvss4Higher);
    }

    private boolean isCvssDefined(MultiScoreCvssVector cvss) {
        return cvss != null && (cvss.isAnyBaseDefined() || cvss.isAnyTemporalDefined() || cvss.isAnyEnvironmentalDefined());
    }

    private boolean isCvssDefined(CvssVector cvss) {
        return cvss != null && cvss.isAnyBaseDefined();
    }

    public void applyCvss2(Cvss2 cvss2) {
        if (cvss2 == null) return;
        cvss2.applyVector(this.cvss2);
        cvss2.applyVectorPartsIfHigher(cvss2Higher, CvssVector::getOverallScore);
        cvss2.applyVectorPartsIfLower(cvss2Lower, CvssVector::getOverallScore);
    }

    public void applyCvss3P1(Cvss3P1 cvss3) {
        if (cvss3 == null) return;
        cvss3.applyVector(this.cvss3);
        cvss3.applyVectorPartsIfHigher(cvss3Higher, CvssVector::getOverallScore);
        cvss3.applyVectorPartsIfLower(cvss3Lower, CvssVector::getOverallScore);
    }

    public void applyCvss4(Cvss4P0 cvss4) {
        if (cvss4 == null) return;
        cvss4.applyVector(this.cvss4);
        cvss4.applyVectorPartsIfHigher(cvss4Higher, CvssVector::getOverallScore);
        cvss4.applyVectorPartsIfLower(cvss4Lower, CvssVector::getOverallScore);
    }

    public Scope getScope() {
        return scope;
    }

    public boolean isScope(Scope scope) {
        return this.scope == scope;
    }

    public String getTitle() {
        return title;
    }

    public List<AeaaVulnerabilityStatusHistoryEntry> getLabelFilteredStatusHistory(Collection<String> activeLabels) {
        return statusHistory.stream()
                .map(AeaaVulnerabilityStatusHistoryEntry::clone)
                .peek(entry -> entry.setActive(entry.isIncluded(activeLabels)))
                .sorted()
                .collect(Collectors.toList());
    }

    public List<AeaaVulnerabilityStatusHistoryEntry> getLabelFilteredStatusHistory(String[] activeLabels) {
        return getLabelFilteredStatusHistory(Arrays.asList(activeLabels));
    }

    public void reorderChronologically(AeaaVulnerability vulnerability, boolean isInsignificant, double insignificantThreshold) {
        final List<AeaaVulnerabilityStatusHistoryEntry> reordered = AeaaVulnerabilityStatusHistoryEntry.reorderChronologically(this, vulnerability, isInsignificant, insignificantThreshold);
        this.statusHistory.clear();
        this.statusHistory.addAll(reordered);
    }

    private static <T extends CvssVector> void setCvssVectorIfPresent(Supplier<Boolean> hasCvss, Supplier<T> getCvss, Consumer<T> setStatusCvss) {
        if (hasCvss.get()) {
            setStatusCvss.accept(getCvss.get());
        }
    }

    private static <T extends CvssVector> void setCvssVectorIfPresent(AeaaVulnerability vulnerability, Class<T> clazz, Supplier<Boolean> hasCvss, Supplier<T> getCvss, CvssSource.CvssEntity entity) {
        if (hasCvss.get()) {
            final T vector = (T) getCvss.get().deriveAddSource(new CvssSource(KnownCvssEntities.ASSESSMENT, entity, clazz));
            vulnerability.getCvssVectors().addCvssVector(vector);
        }
    }

    public JSONObject toJson() {
        final JSONObject json = new JSONObject();

        json.put("cvss2", cvss2 != null ? String.valueOf(cvss2) : null);
        json.put("cvss2Lower", cvss2Lower != null ? String.valueOf(cvss2Lower) : null);
        json.put("cvss2Higher", cvss2Higher != null ? String.valueOf(cvss2Higher) : null);
        json.put("cvss3", cvss3 != null ? String.valueOf(cvss3) : null);
        json.put("cvss3Lower", cvss3Lower != null ? String.valueOf(cvss3Lower) : null);
        json.put("cvss3Higher", cvss3Higher != null ? String.valueOf(cvss3Higher) : null);
        json.put("cvss4", cvss4 != null ? String.valueOf(cvss4) : null);
        json.put("cvss4Lower", cvss4Lower != null ? String.valueOf(cvss4Lower) : null);
        json.put("cvss4Higher", cvss4Higher != null ? String.valueOf(cvss4Higher) : null);

        final JSONArray reviewed = reviewedAdvisories.stream().map(AeaaVulnerabilityStatusReviewedEntry::toJson).collect(JSONArray::new, JSONArray::put, JSONArray::putAll);
        json.put("reviewedAdvisories", reviewed);
        final JSONArray history = statusHistory.stream().map(AeaaVulnerabilityStatusHistoryEntry::toJson).collect(JSONArray::new, JSONArray::put, JSONArray::putAll);
        json.put("statusHistory", history);

        json.put("acceptedBy", acceptedBy);
        json.put("acceptedDate", acceptedDate);
        json.put("reportedBy", reportedBy);
        json.put("reportedDate", reportedDate);
        json.put("title", title);

        json.put("scope", scope);

        return json;
    }

    public void appendFromJson(final JSONObject json) {
        this.setCvss2(new Cvss2(json.optString("cvss2", null)));
        this.setCvss2Lower(new Cvss2(json.optString("cvss2Lower", null)));
        this.setCvss2Higher(new Cvss2(json.optString("cvss2Higher", null)));
        this.setCvss3P1(new Cvss3P1(json.optString("cvss3", null)));
        this.setCvss3P1Lower(new Cvss3P1(json.optString("cvss3Lower", null)));
        this.setCvss3P1Higher(new Cvss3P1(json.optString("cvss3Higher", null)));
        this.setCvss4(new Cvss4P0(json.optString("cvss4", null)));
        this.setCvss4Lower(new Cvss4P0(json.optString("cvss4Lower", null)));
        this.setCvss4Higher(new Cvss4P0(json.optString("cvss4Higher", null)));

        final JSONArray reviewed = json.optJSONArray("reviewedAdvisories");
        if (reviewed != null) {
            for (int i = 0; i < reviewed.length(); i++) {
                this.getReviewedAdvisories().add(AeaaVulnerabilityStatusReviewedEntry.fromMap(reviewed.getJSONObject(i).toMap()));
            }
        }

        final JSONArray history = json.optJSONArray("statusHistory");
        if (history != null) {
            for (int i = 0; i < history.length(); i++) {
                this.addHistoryEntry(AeaaVulnerabilityStatusHistoryEntry.fromMap(history.getJSONObject(i).toMap()));
            }
        }

        this.setAcceptedBy(json.optString("acceptedBy", null));
        this.setAcceptedDate(json.optString("acceptedDate", null));
        this.setReportedBy(json.optString("reportedBy", null));
        this.setReportedDate(json.optString("reportedDate", null));
        this.setTitle(json.optString("title", null));

        this.setScope(Scope.fromString(json.optString("scope", null)));
    }

    public static List<AeaaVulnerabilityStatusHistoryEntry> mergeStatusHistoryEntries(Collection<Collection<AeaaVulnerabilityStatusHistoryEntry>> entries) {
        return entries.stream()
                .filter(Objects::nonNull)
                .flatMap(Collection::stream)
                .filter(Objects::nonNull)
                .distinct()
                .collect(Collectors.toList());
    }

    public enum Scope {
        ARTIFACT,
        INVENTORY;

        public static Scope fromString(String scope) {
            if (scope == null) {
                return ARTIFACT;
            }

            switch (scope.trim().toLowerCase()) {
                case "inventory":
                    return INVENTORY;
                case "artifact":
                default:
                    return ARTIFACT;
            }
        }
    }
}
