/*
 * Copyright 2009-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.metaeffekt.core.inventory.processor.report.model.aeaa.assessment;

import com.google.gson.reflect.TypeToken;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.json.JSONArray;
import org.json.JSONObject;
import org.metaeffekt.core.inventory.processor.report.model.aeaa.vulnerabilitystatus.AeaaVulnerabilityStatus;

import java.io.File;
import java.util.*;

import static org.metaeffekt.core.inventory.processor.report.model.aeaa.assessment.AeaaVulnerabilityAssessmentOperations.parseIfPresent;

@Slf4j
@Data
public class AeaaVulnerabilityAssessment {
    private String schemaVersion;
    private File sourceFile;
    private Scope scope = Scope.VULNERABILITY;

    private List<AeaaVulnerabilityAssessmentEvent> events = new ArrayList<>();

    // SECTION: data access

    public boolean isScope(Scope scope) {
        return this.scope == scope;
    }

    // SECTION: query

    public void orderEvents() {
        events.sort(Comparator.naturalOrder());
    }

    public static List<AeaaVulnerabilityAssessmentEvent> findAllEvents(Collection<AeaaVulnerabilityAssessment> assessments) {
        final List<AeaaVulnerabilityAssessmentEvent> allEvents = new ArrayList<>();
        for (AeaaVulnerabilityAssessment assessment : assessments) {
            allEvents.addAll(assessment.getEvents());
        }
        return allEvents;
    }

    // SECTION: serialize

    public String toJson() {
        return AeaaVulnerabilityAssessmentOperations.GSON.toJson(this);
    }

    public static String toJson(Collection<AeaaVulnerabilityAssessment> assessments) {
        return AeaaVulnerabilityAssessmentOperations.GSON.toJson(assessments);
    }

    public JSONObject toJsonObject() {
        return new JSONObject(toJson());
    }

    public static JSONArray toJsonArray(Collection<AeaaVulnerabilityAssessment> assessments) {
        return new JSONArray(toJson(assessments));
    }

    // SECTION: deserialize

    public static AeaaVulnerabilityAssessment fromJson(String json) {
        return AeaaVulnerabilityAssessmentOperations.GSON.fromJson(json, AeaaVulnerabilityAssessment.class);
    }

    public static List<AeaaVulnerabilityAssessment> fromJsonArray(String json) {
        return AeaaVulnerabilityAssessmentOperations.GSON.fromJson(json, new TypeToken<List<AeaaVulnerabilityAssessment>>() {
        }.getType());
    }

    public static AeaaVulnerabilityAssessment fromJsonObject(JSONObject json) {
        return fromJson(json.toString());
    }

    public static List<AeaaVulnerabilityAssessment> fromJsonArray(JSONArray json) {
        return fromJsonArray(json.toString());
    }

    public static AeaaVulnerabilityAssessment fromMap(File sourceFile, Map<String, Object> root) {
        final AeaaVulnerabilityAssessment assessment = fromMap(root);
        assessment.setSourceFile(sourceFile);
        return assessment;
    }

    public static AeaaVulnerabilityAssessment fromMap(Map<String, Object> root) {
        final AeaaVulnerabilityAssessment assessment = new AeaaVulnerabilityAssessment();

        // usually passed in from the outside, let's check anyway
        assessment.schemaVersion = parseIfPresent(root, new String[]{"schema-version", "schemaVersion"}, String.class, null, String::valueOf);

        assessment.scope = parseIfPresent(root, "scope", String.class, Scope.VULNERABILITY, Scope::fromString);

        final Object events = root.get("events");
        if (events instanceof List) {
            for (Object event : (List) events) {
                if (event instanceof Map) {
                    final AeaaVulnerabilityAssessmentEvent assessmentEvent = AeaaVulnerabilityAssessmentEvent.fromMap((Map<String, Object>) event);
                    assessmentEvent.setScope(assessment.scope);
                    assessment.events.add(assessmentEvent);
                } else if (event != null) {
                    log.warn("Invalid VulnerabilityAssessmentEvent type [{}] [{}] while parsing, skipping", event.getClass(), event);
                } else {
                    log.warn("Invalid null VulnerabilityAssessmentEvent while parsing from [{}], skipping", root);
                }
            }
        }

        return assessment;
    }

    public enum Scope {
        VULNERABILITY,
        INVENTORY;

        public static Scope fromString(String scope) {
            if (scope == null) {
                return VULNERABILITY;
            }

            switch (scope.trim().toLowerCase()) {
                case "all":
                case "inventory":
                    return INVENTORY;
                case "vulnerability":
                case "single":
                case "artifact":
                    return VULNERABILITY;
                default:
                    log.warn("Unknown scope [{}], defaulting to [{}]", scope, VULNERABILITY);
                    return VULNERABILITY;
            }
        }

        public static Scope fromLegacyScope(AeaaVulnerabilityStatus.Scope scope) {
            if (scope == null) {
                return VULNERABILITY;
            }

            return fromString(scope.name());
        }
    }
}
