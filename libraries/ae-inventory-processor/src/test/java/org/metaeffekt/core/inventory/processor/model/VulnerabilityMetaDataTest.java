/*
 * Copyright 2009-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.metaeffekt.core.inventory.processor.model;

import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.metaeffekt.core.inventory.processor.model.VulnerabilityMetaData.*;

public class VulnerabilityMetaDataTest {

    @Test
    public void filterNoDoubleTest() {
        String[] statuses = new String[]{
                STATUS_VALUE_APPLICABLE,
                STATUS_VALUE_INSIGNIFICANT,
                STATUS_VALUE_NOTAPPLICABLE,
                STATUS_VALUE_VOID,
                "",
                null
        };

        Collection<VulnerabilityMetaData> vmds = new ArrayList<>();

        for (String status : statuses) {
            vmds.add(createVMD(status, "8.9"));
            vmds.add(createVMD(status, "4.5"));
            vmds.add(createVMD(status, ""));
            vmds.add(createVMD(status, null));
        }

        List<VulnerabilityMetaData> filteredByApplicability = filterApplicableVulnerabilities(vmds, 7);
        List<VulnerabilityMetaData> filteredByNotApplicability = filterNotApplicableVulnerabilities(vmds, 7);
        List<VulnerabilityMetaData> filteredByInsignificant = filterInsignificantVulnerabilities(vmds, 7);
        List<VulnerabilityMetaData> filteredByVoid = filterVoidVulnerabilities(vmds);

        for (VulnerabilityMetaData vmd : filteredByApplicability) {
            if (filteredByNotApplicability.contains(vmd)) {
                Assert.fail("VulnerabilityMetaData is contained in both applicable and not applicable vulnerabilities: " + vmd.createCompareStringRepresentation());
            }
            if (filteredByVoid.contains(vmd)) {
                Assert.fail("VulnerabilityMetaData is contained in both applicable and void vulnerabilities: " + vmd.createCompareStringRepresentation());
            }
            if (filteredByInsignificant.contains(vmd)) {
                Assert.fail("VulnerabilityMetaData is contained in both applicable and insignificant vulnerabilities: " + vmd.createCompareStringRepresentation());
            }
        }

        for (VulnerabilityMetaData vmd : filteredByNotApplicability) {
            if (filteredByVoid.contains(vmd)) {
                Assert.fail("VulnerabilityMetaData is contained in both not applicable and void vulnerabilities: " + vmd.createCompareStringRepresentation());
            }
            if (filteredByInsignificant.contains(vmd)) {
                Assert.fail("VulnerabilityMetaData is contained in both not applicable and insignificant vulnerabilities: " + vmd.createCompareStringRepresentation());
            }
        }

        for (VulnerabilityMetaData vmd : filteredByInsignificant) {
            if (filteredByVoid.contains(vmd)) {
                Assert.fail("VulnerabilityMetaData is contained in both not insignificant and void vulnerabilities: " + vmd.createCompareStringRepresentation());
            }
        }

        int totalSize = filteredByApplicability.size() + filteredByNotApplicability.size() + filteredByInsignificant.size() + filteredByVoid.size();
        Assert.assertEquals(vmds.size(), totalSize);
    }

    @Test
    public void filterApplicableVulnerabilitiesTest() {
        Collection<VulnerabilityMetaData> vmds = new ArrayList<>();

        vmds.add(createVMD(STATUS_VALUE_INSIGNIFICANT, "7.8"));
        vmds.add(createVMD(STATUS_VALUE_NOTAPPLICABLE, "4"));
        vmds.add(createVMD(null, null));
        vmds.add(createVMD("", null));

        Assert.assertEquals("Expected none to match",
                0, filterApplicableVulnerabilities(vmds, 7).size());

        vmds.add(createVMD(STATUS_VALUE_APPLICABLE, "0.1"));
        vmds.add(createVMD(null, "7.8"));
        vmds.add(createVMD(STATUS_VALUE_APPLICABLE, null));
        vmds.add(createVMD("", "9.8"));

        Assert.assertEquals("Expected all to match",
                4, filterApplicableVulnerabilities(vmds, 7).size());
    }

    @Test
    public void filterNotApplicableVulnerabilitiesTest() {
        Collection<VulnerabilityMetaData> vmds = new ArrayList<>();

        vmds.add(createVMD(null, "7.8"));
        vmds.add(createVMD("", "9.8"));
        vmds.add(createVMD(STATUS_VALUE_INSIGNIFICANT, "7.8"));
        vmds.add(createVMD(STATUS_VALUE_APPLICABLE, "4.5"));
        vmds.add(createVMD(STATUS_VALUE_APPLICABLE, "8.0"));
        vmds.add(createVMD(null, null));
        vmds.add(createVMD("", ""));

        Assert.assertEquals("Expected none to match",
                0, filterNotApplicableVulnerabilities(vmds, 7).size());

        vmds.add(createVMD(STATUS_VALUE_NOTAPPLICABLE, "0.1"));
        vmds.add(createVMD(STATUS_VALUE_NOTAPPLICABLE, null));

        Assert.assertEquals("Expected all to match",
                2, filterNotApplicableVulnerabilities(vmds, 7).size());
    }

    @Test
    public void filterVoidTest() {
        Collection<VulnerabilityMetaData> vmds = new ArrayList<>();

        vmds.add(createVMD(null, "7.8"));
        vmds.add(createVMD("", "9.8"));
        vmds.add(createVMD(STATUS_VALUE_INSIGNIFICANT, "7.8"));
        vmds.add(createVMD(STATUS_VALUE_APPLICABLE, "4.5"));
        vmds.add(createVMD(STATUS_VALUE_APPLICABLE, "8.0"));
        vmds.add(createVMD(null, null));
        vmds.add(createVMD("", ""));

        Assert.assertEquals("Expected none to match",
                0, filterNotApplicableVulnerabilities(vmds, 7).size());

        vmds.add(createVMD(STATUS_VALUE_VOID, "0.1"));
        vmds.add(createVMD(STATUS_VALUE_VOID, null));
        vmds.add(createVMD(STATUS_VALUE_VOID, "9.5"));

        Assert.assertEquals("Expected all to match",
                3, filterVoidVulnerabilities(vmds).size());
    }

    private static VulnerabilityMetaData createVMD(String status, String maxScore) {
        VulnerabilityMetaData vmd = new VulnerabilityMetaData();
        if (status != null) {
            vmd.set(VulnerabilityMetaData.Attribute.STATUS, status);
        }
        if (maxScore != null) {
            vmd.set(VulnerabilityMetaData.Attribute.MAX_SCORE, maxScore);
        }
        return vmd;
    }

}