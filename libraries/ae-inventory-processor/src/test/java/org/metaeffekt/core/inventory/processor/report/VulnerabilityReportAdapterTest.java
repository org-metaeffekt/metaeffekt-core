/*
 * Copyright 2009-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.metaeffekt.core.inventory.processor.report;

import lombok.extern.slf4j.Slf4j;
import org.junit.Assert;
import org.junit.Test;
import org.metaeffekt.core.inventory.processor.model.Inventory;
import org.metaeffekt.core.inventory.processor.model.VulnerabilityMetaData;
import org.metaeffekt.core.inventory.processor.reader.InventoryReader;
import org.metaeffekt.core.inventory.processor.report.adapter.VulnerabilityReportAdapter;
import org.metaeffekt.core.inventory.processor.report.configuration.CentralSecurityPolicyConfiguration;
import org.metaeffekt.core.inventory.processor.report.model.aeaa.processor.ProcessorTimeTracker;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.List;

@Slf4j
public class VulnerabilityReportAdapterTest {

    @Test
    public void getFurtherAbstractedVulnerabilityCategoryTest() {
        Assert.assertEquals("potentially affected", CentralSecurityPolicyConfiguration.VULNERABILITY_STATUS_DISPLAY_MAPPER_ABSTRACTED.getMapper().apply(null));
        Assert.assertEquals("potentially affected", CentralSecurityPolicyConfiguration.VULNERABILITY_STATUS_DISPLAY_MAPPER_ABSTRACTED.getMapper().apply(""));
        Assert.assertEquals("potentially affected", CentralSecurityPolicyConfiguration.VULNERABILITY_STATUS_DISPLAY_MAPPER_ABSTRACTED.getMapper().apply("in review"));
        Assert.assertEquals("potentially affected", CentralSecurityPolicyConfiguration.VULNERABILITY_STATUS_DISPLAY_MAPPER_ABSTRACTED.getMapper().apply(VulnerabilityMetaData.STATUS_VALUE_INSIGNIFICANT));

        Assert.assertEquals("affected", CentralSecurityPolicyConfiguration.VULNERABILITY_STATUS_DISPLAY_MAPPER_ABSTRACTED.getMapper().apply(VulnerabilityMetaData.STATUS_VALUE_APPLICABLE));

        Assert.assertEquals("not affected", CentralSecurityPolicyConfiguration.VULNERABILITY_STATUS_DISPLAY_MAPPER_ABSTRACTED.getMapper().apply(VulnerabilityMetaData.STATUS_VALUE_NOTAPPLICABLE));
        Assert.assertEquals("not affected", CentralSecurityPolicyConfiguration.VULNERABILITY_STATUS_DISPLAY_MAPPER_ABSTRACTED.getMapper().apply(VulnerabilityMetaData.STATUS_VALUE_VOID));
    }

    @Test
    public void postProcessCvssSourceStringAssessmentTest() {
        final VulnerabilityReportAdapter adapter = new VulnerabilityReportAdapter(new Inventory(), new CentralSecurityPolicyConfiguration());
        Assert.assertEquals("NVD-CNA-NVD", adapter.postProcessCvssSource("NVD-CNA-NVD"));
        Assert.assertEquals("NVD-CNA-NVD + Assessment", adapter.postProcessCvssSource("NVD-CNA-NVD + Assessment + Assessment-all"));
        Assert.assertEquals("NVD-CNA-NVD + Assessment", adapter.postProcessCvssSource("NVD-CNA-NVD + Assessment-all + Assessment-lower"));
    }

    @Test
    public void splitVulnerabilityMatchingSourcesIntoMultipleLines1Test() {
        final List<String> inputLines = Arrays.asList("cpe:/a:apache:log4j:2.14.0", "GHSA [2.13.0.0, 2.15.0.0) org.apache.logging.log4j:log4j-core (Maven)", "NVD cpe:/a:vmware:spring_framework:5.3.14", "this is one long space test1:test2:test3:test4");
        final List<String> expectedLines = Arrays.asList("cpe:/a:apache:log4j:2.14.0", "", "GHSA [2.13.0.0, 2.15.0.0)", "org.apache.logging.log4j:", "log4j-core (Maven)", "", "NVD cpe:/a:vmware:spring_", "framework:5.3.14", "", "this is one long space", "test1:test2:test3:test4");
        final List<String> actualLines = new VulnerabilityReportAdapter(new Inventory(), new CentralSecurityPolicyConfiguration()).splitVulnerabilityMatchingSourcesIntoMultipleLines(inputLines, 20, 28);
        Assert.assertEquals(expectedLines, actualLines);
    }



    @Test
    public void generateTimestampPropertiesTest() throws IOException, URISyntaxException {
        File mergedInventory = new File(this.getClass().getClassLoader().getResource("merged-inventories/example-0.1.0-merged.xls").toURI());

        InventoryReader inventoryReader = new InventoryReader();
        Inventory inventory = inventoryReader.readInventory(mergedInventory);

        Assert.assertEquals(5, new ProcessorTimeTracker(inventory).getEntries().size());

        final VulnerabilityReportAdapter adapter = new VulnerabilityReportAdapter(inventory, new CentralSecurityPolicyConfiguration());
        adapter.generateEnrichmentTimestampConfigs();
    }
}