/*
 * Copyright 2009-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.metaeffekt.core.inventory.processor.report;

import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Assert;
import org.junit.Test;
import org.metaeffekt.core.inventory.processor.model.Inventory;
import org.metaeffekt.core.inventory.processor.model.VulnerabilityMetaData;

import java.util.Arrays;

public class VulnerabilityReportAdapterTest {

    private enum SEVERITY {
        CRITICAL,
        HIGH,
        MEDIUM,
        LOW,
        NONE
    }

    @Test
    public void createStatisticsOverviewTableTest() {
        Inventory inventory = new Inventory();
        VulnerabilityReportAdapter vra = new VulnerabilityReportAdapter(inventory);

        Assert.assertTrue(vra.createStatisticsOverviewTable().isEmpty());

        inventory.getVulnerabilityMetaData().add(createVMD(VulnerabilityMetaData.STATUS_VALUE_APPLICABLE, SEVERITY.CRITICAL.toString(), "CERT-FR"));
        inventory.getVulnerabilityMetaData().add(createVMD(VulnerabilityMetaData.STATUS_VALUE_APPLICABLE, SEVERITY.CRITICAL.toString(), "CERT-FR", "CERT-SEI"));

        Assert.assertFalse(vra.createStatisticsOverviewTable().isEmpty());
        Assert.assertTrue(vra.createStatisticsOverviewTable("MSRC").isEmpty());
        Assert.assertFalse(vra.createStatisticsOverviewTable("CERT-FR").isEmpty());
        Assert.assertEquals(Arrays.asList("Severity", "Applicable", "Total", "% Assessed"), vra.createStatisticsOverviewTable().getHeaders());
        Assert.assertEquals(Arrays.asList("Critical", "High", "Medium", "Low"), vra.createStatisticsOverviewTable().getSeverityCategories());
        Assert.assertEquals(Arrays.asList(2, 2, 100), vra.createStatisticsOverviewTable().getCountsForSeverityCategory("critical"));

        inventory.getVulnerabilityMetaData().add(createVMD(null, SEVERITY.CRITICAL.toString()));
        inventory.getVulnerabilityMetaData().add(createVMD(null, SEVERITY.HIGH.toString()));

        Assert.assertFalse(vra.createStatisticsOverviewTable().isEmpty());
        Assert.assertEquals(Arrays.asList("Severity", "Applicable", "Total", "% Assessed"), vra.createStatisticsOverviewTable("CERT-FR").getHeaders());
        Assert.assertEquals(Arrays.asList("Critical", "High", "Medium", "Low"), vra.createStatisticsOverviewTable("CERT-FR").getSeverityCategories());
        Assert.assertEquals(Arrays.asList(2, 2, 100), vra.createStatisticsOverviewTable("CERT-FR").getCountsForSeverityCategory("critical"));

        Assert.assertEquals(Arrays.asList("Severity", "Applicable", "Total", "% Assessed"), vra.createStatisticsOverviewTable("CERT-SEI").getHeaders());
        Assert.assertEquals(Arrays.asList("Critical", "High", "Medium", "Low"), vra.createStatisticsOverviewTable("CERT-SEI").getSeverityCategories());
        Assert.assertEquals(Arrays.asList(1, 1, 100), vra.createStatisticsOverviewTable("CERT-SEI").getCountsForSeverityCategory("critical"));

        Assert.assertEquals(Arrays.asList("Severity", "Applicable", "Not Assessed", "Total", "% Assessed"), vra.createStatisticsOverviewTable().getHeaders());
        Assert.assertEquals(Arrays.asList("Critical", "High", "Medium", "Low"), vra.createStatisticsOverviewTable().getSeverityCategories());
        Assert.assertEquals(Arrays.asList(2, 1, 3, 66), vra.createStatisticsOverviewTable().getCountsForSeverityCategory("critical"));
        Assert.assertEquals(Arrays.asList(0, 1, 1, 0), vra.createStatisticsOverviewTable().getCountsForSeverityCategory("high"));

        inventory.getVulnerabilityMetaData().add(createVMD(VulnerabilityMetaData.STATUS_VALUE_VOID, null, "MSRC"));
        Assert.assertEquals(Arrays.asList("Severity", "Void", "Total", "% Assessed"), vra.createStatisticsOverviewTable("MSRC").getHeaders());
        Assert.assertEquals(Arrays.asList("Critical", "High", "Medium", "Low", "Unset"), vra.createStatisticsOverviewTable("MSRC").getSeverityCategories());
        Assert.assertEquals(Arrays.asList(0, 0, 100), vra.createStatisticsOverviewTable("MSRC").getCountsForSeverityCategory("high"));
        Assert.assertEquals(Arrays.asList(1, 1, 100), vra.createStatisticsOverviewTable("MSRC").getCountsForSeverityCategory("unset"));
    }

    @Test
    public void createStatisticsOverviewTableAddStatusAfterwardsTest() {
        Inventory inventory = new Inventory();
        VulnerabilityReportAdapter vra = new VulnerabilityReportAdapter(inventory);

        inventory.getVulnerabilityMetaData().add(createVMD(null, SEVERITY.CRITICAL.toString()));
        inventory.getVulnerabilityMetaData().add(createVMD(null, SEVERITY.CRITICAL.toString()));
        inventory.getVulnerabilityMetaData().add(createVMD(null, SEVERITY.HIGH.toString()));
        inventory.getVulnerabilityMetaData().add(createVMD(null, SEVERITY.LOW.toString()));
        inventory.getVulnerabilityMetaData().add(createVMD(VulnerabilityMetaData.STATUS_VALUE_VOID, null));

        Assert.assertEquals(Arrays.asList(0, 1, 1, 100), vra.createStatisticsOverviewTable().getCountsForSeverityCategory("unset"));
    }

    private VulnerabilityMetaData createVMD(String status, String severity, String... cert) {
        VulnerabilityMetaData vmd = new VulnerabilityMetaData();

        vmd.set(VulnerabilityMetaData.Attribute.STATUS, status);
        vmd.set("CVSS Unmodified Severity (max)", severity);
        JSONArray certs = new JSONArray();
        for (String c : cert) {
            certs.put(new JSONObject().put("source", c));
        }
        vmd.set("Advisories", certs.toString());

        return vmd;
    }

}