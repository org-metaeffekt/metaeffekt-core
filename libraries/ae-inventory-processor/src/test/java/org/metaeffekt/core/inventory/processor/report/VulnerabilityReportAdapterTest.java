/*
 * Copyright 2009-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.metaeffekt.core.inventory.processor.report;

import org.junit.Assert;
import org.junit.Test;
import org.metaeffekt.core.inventory.processor.model.Inventory;
import org.metaeffekt.core.inventory.processor.model.VulnerabilityMetaData;

public class VulnerabilityReportAdapterTest {

    @Test
    public void getFurtherAbstractedVulnerabilityCategoryTest() {
        VulnerabilityReportAdapter adapter = new VulnerabilityReportAdapter(new Inventory());

        Assert.assertEquals("potentially affected", adapter.getFurtherAbstractedVulnerabilityCategory(null));
        Assert.assertEquals("potentially affected", adapter.getFurtherAbstractedVulnerabilityCategory(""));
        Assert.assertEquals("potentially affected", adapter.getFurtherAbstractedVulnerabilityCategory("in review"));

        Assert.assertEquals("affected", adapter.getFurtherAbstractedVulnerabilityCategory(VulnerabilityMetaData.STATUS_VALUE_APPLICABLE));

        Assert.assertEquals("not affected", adapter.getFurtherAbstractedVulnerabilityCategory(VulnerabilityMetaData.STATUS_VALUE_NOTAPPLICABLE));
        Assert.assertEquals("not affected", adapter.getFurtherAbstractedVulnerabilityCategory(VulnerabilityMetaData.STATUS_VALUE_VOID));
        Assert.assertEquals("not affected", adapter.getFurtherAbstractedVulnerabilityCategory(VulnerabilityMetaData.STATUS_VALUE_INSIGNIFICANT));
    }

    @Test
    public void getCvssScoreByScoringPreference() {
        final Inventory inventory = new Inventory();
        final VulnerabilityReportAdapter adapter = new VulnerabilityReportAdapter(inventory);

        Assert.assertEquals("1.0", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(1.0, -1, -1, -1, -1, -1), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));
        Assert.assertEquals("2.0", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(1.0, 2.0, -1, -1, -1, -1), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));
        Assert.assertEquals("2.0", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(1.0, 2.0, -1, 4.0, 3.0, -1), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));
        Assert.assertEquals("2.0", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(1.0, 2.0, 5.0, 4.0, 3.0, 6.0), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));
        Assert.assertEquals("9.0", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(9.0, -1, 5.0, 4.0, 3.0, 6.0), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));
        Assert.assertEquals("N/A", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(-1, -1, -1, 4.0, 3.0, 6.0), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));

        Assert.assertEquals("3.0", adapter.getModifiedCvssScoreByScoringPreference(createVmdWithScores(9.0, 4.5, 5.0, 4.0, 3.0, 6.0), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));
        Assert.assertEquals("4.0", adapter.getModifiedCvssScoreByScoringPreference(createVmdWithScores(9.0, 4.5, 5.0, 4.0, -1, 6.0), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));

        Assert.assertEquals("9.0", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(9.0, 4.5, 5.0, 4.0, -1, -1), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_MAX));
        Assert.assertEquals("5.0", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(-1, 4.5, 5.0, 4.0, -1, -1), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_MAX));
        Assert.assertEquals("4.5", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(3.0, 4.5, 4.5, 4.0, -1, -1), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_MAX));

        Assert.assertEquals("6.0", adapter.getModifiedCvssScoreByScoringPreference(createVmdWithScores(9.0, 4.5, 5.0, 4.0, -1, 6.0), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_MAX));
        Assert.assertEquals("4.0", adapter.getModifiedCvssScoreByScoringPreference(createVmdWithScores(9.0, 4.5, 5.0, 4.0, -1, -1), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_MAX));
        Assert.assertEquals("N/A", adapter.getModifiedCvssScoreByScoringPreference(createVmdWithScores(-1, 4.5, 5.0, -1, -1, -1), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_MAX));

        Assert.assertEquals("5.0", adapter.getUnmodifiedCvssScoreByScoringPreference(createVmdWithScores(-1, 4.5, 5.0, -1, -1, -1), "v2 max v3"));
    }

    @Test
    public void getCvssSeverityByScoringPreference() {
        final Inventory inventory = new Inventory();
        final VulnerabilityReportAdapter adapter = new VulnerabilityReportAdapter(inventory);

        Assert.assertEquals("Critical", adapter.getUnmodifiedCvssSeverityByScoringPreference(createVmdWithSeverity(null, "Critical", null, null, null, null), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));
        Assert.assertEquals("Critical", adapter.getUnmodifiedCvssSeverityByScoringPreference(createVmdWithSeverity("Low", "Critical", null, null, null, null), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_LATEST_FIRST));

        Assert.assertEquals("Critical", adapter.getUnmodifiedCvssSeverityByScoringPreference(createVmdWithSeverity("Low", null, "Critical", null, null, null), VulnerabilityReportAdapter.CVSS_SCORING_PREFERENCE_MAX));
    }

    private VulnerabilityMetaData createVmdWithScores(double unmodifiedV2, double unmodifiedV3, double unmodifiedMax, double modifiedV2, double modifiedV3, double modifiedMax) {
        final VulnerabilityMetaData vmd = new VulnerabilityMetaData();

        if (unmodifiedV2 != -1) vmd.set("CVSS Unmodified Overall (v2)", String.valueOf(unmodifiedV2));
        if (unmodifiedV3 != -1) vmd.set("CVSS Unmodified Overall (v3)", String.valueOf(unmodifiedV3));
        if (unmodifiedMax != -1) vmd.set("CVSS Unmodified Overall (max)", String.valueOf(unmodifiedMax));

        if (modifiedV2 != -1) vmd.set("CVSS Modified Overall (v2)", String.valueOf(modifiedV2));
        if (modifiedV3 != -1) vmd.set("CVSS Modified Overall (v3)", String.valueOf(modifiedV3));
        if (modifiedMax != -1) vmd.set("CVSS Modified Overall (max)", String.valueOf(modifiedMax));

        return vmd;
    }

    private VulnerabilityMetaData createVmdWithSeverity(String unmodifiedV2, String unmodifiedV3, String unmodifiedMax, String modifiedV2, String modifiedV3, String modifiedMax) {
        final VulnerabilityMetaData vmd = new VulnerabilityMetaData();

        if (unmodifiedV2 != null) vmd.set("CVSS Unmodified Severity (v2)", unmodifiedV2);
        if (unmodifiedV3 != null) vmd.set("CVSS Unmodified Severity (v3)", unmodifiedV3);
        if (unmodifiedMax != null) vmd.set("CVSS Unmodified Severity (max)", unmodifiedMax);

        if (modifiedV2 != null) vmd.set("CVSS Modified Severity (v2)", modifiedV2);
        if (modifiedV3 != null) vmd.set("CVSS Modified Severity (v3)", modifiedV3);
        if (modifiedMax != null) vmd.set("CVSS Modified Severity (max)", modifiedMax);


        return vmd;
    }
}